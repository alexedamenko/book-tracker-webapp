// üìÅ app.js ‚Äî –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ WebApp

// üõ† –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
 import {
   // –±–∞–∑–æ–≤—ã–µ
   getBooks, addBook, uploadExport, updateBook, deleteBook,
   saveComment, checkAndInsertLibraryBook, deleteImageFromStorage,
   uploadCover, searchBooks, deleteCommentImage, uploadCommentImage,
   // –ø–æ–ª–∫–∏
   listCollections, listAllBookCollections, listBookCollections,
   setBookCollections, createCollection, renameCollection, deleteCollection,
   // –ø—Ä–æ—Ñ–∏–ª–∏/–¥—Ä—É–∑—å—è
   upsertProfile, listFriends, sendFriendRequest, listFriendRequests,
   respondFriendRequest, friendsReadingNow, createFriendInvite, acceptFriendInvite,
   // –≥—Ä—É–ø–ø—ã –∏ ¬´–∫–Ω–∏–≥–∞ –Ω–µ–¥–µ–ª–∏¬ª
   createGroup, listGroups, joinGroup, setGroupBook,
   groupDashboard, updateGroupProgress, listGroupComments, postGroupComment
 } from './api.js';

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp Telegram (–∏ –¥–µ–º–æ-—Ä–µ–∂–∏–º –ª–æ–∫–∞–ª—å–Ω–æ)
const tg = window.Telegram?.WebApp;
let userId;

if (tg && tg.initDataUnsafe?.user?.id) {
  tg.ready();
  userId = tg.initDataUnsafe.user.id.toString();
} else {
  console.warn("Demo mode: running outside Telegram");
  userId = "demo_user_001";
}



// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI)
(async () => {
  try {
    const u = window.Telegram?.WebApp?.initDataUnsafe?.user || {};
    await upsertProfile({
      user_id: String(userId),
      username: (u.username || '').toLowerCase(),
      name: [u.first_name, u.last_name].filter(Boolean).join(' '),
      avatar_url: '' // –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º
    });
  } catch (e) {
    console.warn('Profile sync failed', e);
  }
})();

// one-shot –æ–±—Ä–∞–±–æ—Ç–∫–∞ start_param, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
(function handleStartParamOnce() {
  try {
    const sp = window.Telegram?.WebApp?.initDataUnsafe?.start_param || '';
    if (!sp || !sp.startsWith('FRIEND_')) return;
    const key = `friend_start_param_${sp}`;
    if (sessionStorage.getItem(key)) return; // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
    sessionStorage.setItem(key, '1');
    const code = sp.slice(7);
    acceptFriendInvite(code, String(userId)).then(r => {
      if (r?.success) {
        // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º—è–≥–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log('Friend invite accepted via deep link');
      } else {
        console.warn('Invite accept failed', r?.error);
      }
    });
  } catch (e) {
    console.warn('Start param handling failed', e);
  }
})();


// –£–∫–∞–∂–∏ —é–∑–µ—Ä–Ω–µ–π–º —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ (–±–µ–∑ @)
const BOT_USERNAME = window.__booktracker_chip_bot__ || 'your_bot'; // 

function makeFriendLink(code) {
  const c = String(code || '').toUpperCase().trim();
  return `https://t.me/${BOT_USERNAME}?startapp=FRIEND_${c}`;
}


// üìö –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
let books = [];
let currentTab = "read";

// ==== –°–û–†–¢–ò–†–û–í–ö–ê: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ö–µ–ª–ø–µ—Ä—ã ====
const SORT_DEFAULT = 'auto';    // auto: read‚Üífinished_at, reading‚Üístarted_at, want‚Üíadded_at
let sortKey = SORT_DEFAULT;
let sortDir = 'desc';

// –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤–∫–ª–∞–¥–∫–∞ + –ø–æ–ª–∫–∞) ‚Üí –∫–ª—é—á –¥–ª—è localStorage
function sortCtxKey() {
  const tab = String(currentTab || 'all');
  const col = String(currentCollectionId || 'all');
  return `sort:${tab}:${col}`;
}
function loadSortStateForContext() {
  const raw = localStorage.getItem(sortCtxKey());
  if (!raw) { sortKey = SORT_DEFAULT; sortDir = 'desc'; return; }
  try {
    const j = JSON.parse(raw);
    sortKey = j?.key || SORT_DEFAULT;
    sortDir = j?.dir || 'desc';
  } catch { sortKey = SORT_DEFAULT; sortDir = 'desc'; }
}
function saveSortStateForContext() {
  localStorage.setItem(sortCtxKey(), JSON.stringify({ key: sortKey, dir: sortDir }));
}

// —É–º–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ (—Ä–µ–≥–∏—Å—Ç—Ä, —ë‚Üí–µ, —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏/–¥–µ—Ñ–∏—Å—ã/–ø—É–Ω–∫—Ç—É–∞—Ü–∏—é)
function normStrSmart(s) {
  return String(s ?? '')
    .toLowerCase()
    .replaceAll('—ë', '–µ')
    .replace(/[¬´¬ª"‚Äú‚Äù'‚Äô`]/g, '')     // –∫–∞–≤—ã—á–∫–∏
    .replace(/[‚Äì‚Äî-]/g, ' ')          // –¥–ª–∏–Ω–Ω—ã–µ/–∫–æ—Ä–æ—Ç–∫–∏–µ –¥–µ—Ñ–∏—Å—ã ‚Üí –ø—Ä–æ–±–µ–ª
    .replace(/[.,;:()!?]/g, ' ')     // –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
    .replace(/\s+/g, ' ')
    .trim();
}

// collator –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –ê‚Üí–Ø (—Ä—É—Å—Å–∫–∏–π), –∏–≥–Ω–æ—Ä –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
const collRU = new Intl.Collator('ru', {
  sensitivity: 'base',
  ignorePunctuation: true,
  numeric: true
});


// üìö –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–æ–∫
let collections = [];
let bookCollectionsMap = new Map(); // bookId -> Set(collectionId)
let currentCollectionId = null;

function escapeHtml(s = "") {
  return s.replace(/[&<>"']/g, m => (
    { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m]
  ));
}

async function loadCollectionsData() {
  collections = await listCollections(userId);
  const pairs = await listAllBookCollections(userId);
  bookCollectionsMap = new Map();
  for (const { book_id, collection_id } of pairs) {
    if (!bookCollectionsMap.has(book_id)) bookCollectionsMap.set(book_id, new Set());
    bookCollectionsMap.get(book_id).add(collection_id);
  }
}

function getVisibleBooks() {
  let base = books.filter(b => b.status === currentTab);
  if (currentCollectionId) {
    base = base.filter(b => bookCollectionsMap.get(b.id)?.has(currentCollectionId));
  }
  return applySort(base); // üëà —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ç
}

const COLLECTION_MEMO_KEY = 'ui_current_collection';

function loadCurrentCollection() {
  const v = localStorage.getItem(COLLECTION_MEMO_KEY);
  currentCollectionId = v && v !== 'null' && v !== '' ? v : null;
}

function saveCurrentCollection() {
  if (currentCollectionId) localStorage.setItem(COLLECTION_MEMO_KEY, currentCollectionId);
  else localStorage.removeItem(COLLECTION_MEMO_KEY);
}



// üîÅ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ —Å –∫–Ω–∏–≥–∞–º–∏
window.renderMainScreen = async function () {
  books = await getBooks(userId);
  window.books = books;
  const container = document.getElementById("app");
  await loadCollectionsData();
  
  // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è)
loadCurrentCollection();
  
  // üîë –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ä—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö (–≤–∫–ª–∞–¥–∫–∞, –ø–æ–ª–∫–∞)
  loadSortStateForContext();
  const visible = getVisibleBooks();
  
   container.innerHTML = `
    <h2>üìò –ú–æ–π –∫–Ω–∏–∂–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä</h2>

    <div class="nav-tabs">
      <div class="nav-tab ${currentTab === 'reading' ? 'active' : ''}" onclick="switchTab('reading')">–ß–∏—Ç–∞—é</div>
      <div class="nav-tab ${currentTab === 'read' ? 'active' : ''}" onclick="switchTab('read')">–ü—Ä–æ—á–∏—Ç–∞–ª</div>
      <div class="nav-tab ${currentTab === 'want_to_read' ? 'active' : ''}" onclick="switchTab('want_to_read')">–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</div>
    </div>

    <button onclick="showAddForm()">+ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É</button>
    

  ${renderCollectionsBar()}
  ${renderSortBar()}   
  
    <div id="book-list">
    ${visible.length ? visible.map(renderBookCard).join("") : "<p>üì≠ –ù–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>"}
    </div>

    <div class="footer-buttons">
      <button id="exportBtn">üì§ Export</button>
      <div id="formatMenu" class="hidden">
        <div class="format-option" data-format="csv">CSV</div>
        <div class="format-option" data-format="json">JSON</div>
      </div>
      <button onclick="showStats()">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
      <button onclick="showSearch()">üîç –ü–æ–∏—Å–∫</button>
      <button onclick="showFriends()">üë• –î—Ä—É–∑—å—è</button>
      <button onclick="showGroups()">üë• –ì—Ä—É–ø–ø—ã</button>
    </div>
  `;

  // —Å–º–µ–Ω–∞ –∫–ª—é—á–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sel = container.querySelector('#sortKey');
  if (sel) sel.addEventListener('change', () => {
    sortKey = sel.value;
    saveSortStateForContext();   // üíæ –∑–∞–ø–æ–º–Ω–∏—Ç—å –¥–ª—è —ç—Ç–æ–π (–≤–∫–ª–∞–¥–∫–∞+–ø–æ–ª–∫–∞)
  renderMainScreen();
});
const dirBtn = container.querySelector('#sortDirToggle');
  if (dirBtn) dirBtn.addEventListener('click', () => {
    sortDir = (sortDir === 'asc') ? 'desc' : 'asc';
    saveSortStateForContext();   // üíæ
    renderMainScreen();
  });
 
  // ‚¨áÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
  document.getElementById("exportBtn").addEventListener("click", () => {
    document.getElementById("formatMenu").classList.toggle("hidden");
  });

  document.querySelectorAll(".format-option").forEach(option => {
    option.addEventListener("click", async () => {
      const format = option.getAttribute("data-format");
      document.getElementById("formatMenu").classList.add("hidden");

// –ë–µ—Ä—ë–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π)
const data = (books && books.length) ? books : await getBooks(userId);
if (!data || !data.length) {
alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
return;
}

      if (format === "csv") exportToCSV(data);
      if (format === "json") exportToJSON(data);
    });
  });
}


// ‚òëÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
window.switchTab = function (tab) {
  currentTab = tab;
  renderMainScreen();
};

function renderCollectionsBar() {
  return `
    <div class="collections-bar" style="display:flex; gap:8px; overflow:auto; padding:6px 0;">
      <!-- –í–ê–ñ–ù–û: —É ¬´–í—Å–µ –ø–æ–ª–∫–∏¬ª –ù–ï–¢ data-id -->
      <button id="manageCollectionsBtn" class="chip ${!currentCollectionId ? 'active' : ''}">
        –í—Å–µ –ø–æ–ª–∫–∏
      </button>
      ${collections.map(c => `
        <button class="chip ${String(currentCollectionId) === String(c.id) ? 'active' : ''}" data-id="${c.id}">
          ${c.icon || ''} ${escapeHtml(c.name)}
        </button>
      `).join('')}
      <!-- –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -->
      <button id="openCollectionsManagerBtn" class="chip ghost" title="–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª–∫–∞–º–∏">‚öôÔ∏è</button>
    </div>
  `;
}

function renderSortBar() {
  const k = sortKey; const d = sortDir;
  return `
    <div class="sort-bar">
      <span class="sort-label">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
      <div class="sort-controls">
        <select id="sortKey" class="sort-select">
          <option value="auto"        ${k==='auto'?'selected':''}>–ê–≤—Ç–æ (–ø–æ –≤–∫–ª–∞–¥–∫–µ)</option>
          <option value="title"       ${k==='title'?'selected':''}>–ù–∞–∑–≤–∞–Ω–∏–µ (–ê‚Üí–Ø)</option>
          <option value="author"      ${k==='author'?'selected':''}>–ê–≤—Ç–æ—Ä (–ê‚Üí–Ø)</option>
          <option value="rating"      ${k==='rating'?'selected':''}>–û—Ü–µ–Ω–∫–∞</option>
          <option value="added_at"    ${k==='added_at'?'selected':''}>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</option>
          <option value="finished_at" ${k==='finished_at'?'selected':''}>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</option>
        </select>
        <button type="button"
                id="sortDirToggle"
                class="sort-arrow"
                title="${d==='asc'?'–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é':'–ü–æ —É–±—ã–≤–∞–Ω–∏—é'}"
                aria-label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏">
          ${d === 'asc' ? '‚Üë' : '‚Üì'}
        </button>
      </div>
    </div>
  `;
}





function applySort(list) {
  // –∞–≤—Ç–æ-—Ä–µ–∂–∏–º: –ø–æ –≤–∫–ª–∞–¥–∫–µ
  let effKey = sortKey;
  if (effKey === 'auto') {
    effKey = (currentTab === 'read')
      ? 'finished_at'
      : (currentTab === 'reading' ? 'started_at' : 'added_at');
  }
  const dir = (sortDir === 'asc') ? 1 : -1;

  const dateVal = (v) => {
    if (!v) return NaN;
    const t = new Date(v).getTime();
    return Number.isNaN(t) ? NaN : t;
  };

  function cmp(a, b) {
    let va, vb;
    switch (effKey) {
      case 'title':
        va = normStrSmart(a.title);  vb = normStrSmart(b.title);  break;
      case 'author':
        va = normStrSmart(a.author); vb = normStrSmart(b.author); break;
      case 'rating':
        va = Number(a.rating ?? 0); vb = Number(b.rating ?? 0);    break;
      case 'added_at':
        va = dateVal(a.added_at ?? a.created_at);
        vb = dateVal(b.added_at ?? b.created_at);
        break;
      case 'finished_at':
        va = dateVal(a.finished_at); vb = dateVal(b.finished_at); break;
      case 'started_at':
        va = dateVal(a.started_at);  vb = dateVal(b.started_at);  break;
      default:
        va = 0; vb = 0;
    }

    // –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –ø—Ä–∏ desc ‚Äî –≤ –∫–æ–Ω–µ—Ü, –ø—Ä–∏ asc ‚Äî –≤ –Ω–∞—á–∞–ª–æ
    const aEmpty = (va === '' || va === null || Number.isNaN(va));
    const bEmpty = (vb === '' || vb === null || Number.isNaN(vb));
    if (aEmpty && !bEmpty) return (dir === 1) ? -1 : 1;
    if (!aEmpty && bEmpty) return (dir === 1) ?  1 : -1;

    // –æ—Å–Ω–æ–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ collator, —á–∏—Å–ª–∞/–¥–∞—Ç—ã ‚Äî –∫–∞–∫ —á–∏—Å–ª–∞)
    if (typeof va === 'string' && typeof vb === 'string') {
      const res = collRU.compare(va, vb);
      if (res !== 0) return res * dir;
    } else {
      const na = Number(va), nb = Number(vb);
      if (na < nb) return -1 * dir;
      if (na > nb) return  1 * dir;
    }

    // –≤—Ç–æ—Ä–∏—á–Ω—ã–π –∫–ª—é—á: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
    // –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ç–æ —Ç–∞–π-–±—Ä–µ–π–∫–µ—Ä –ø–æ –∞–≤—Ç–æ—Ä—É; –∏–Ω–∞—á–µ ‚Äî –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const ta = normStrSmart(a.title),  tb = normStrSmart(b.title);
    const aa = normStrSmart(a.author), ab = normStrSmart(b.author);
    if (effKey === 'title') {
      const res2 = collRU.compare(aa, ab);
      if (res2 !== 0) return res2;
      return collRU.compare(ta, tb);
    } else {
      const res2 = collRU.compare(ta, tb);
      if (res2 !== 0) return res2;
      return collRU.compare(aa, ab);
    }
  }

  return [...list].sort(cmp);
}





// üì∑ –ó—É–º –æ–±–ª–æ–∂–∫–∏ (–æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–º–µ—Å—Ç–æ —Ç—Ä—ë—Ö)
window.showZoom = function (url) {
  const overlay = document.getElementById("zoom-overlay");
  const img = document.getElementById("zoom-image");
  img.src = url;
  overlay.classList.remove("hidden");
};

window.closeZoom = function () {
  document.getElementById("zoom-overlay").classList.add("hidden");
};

// üß© –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏ (–æ–±–ª–æ–∂–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥, –¥–∞—Ç—ã –∏ –∑–∞–º–µ—Ç–∫–∞)
function renderBookCard(book) {
  const chips = (bookCollectionsMap.get(book.id) || new Set());
  const chipsHtml = [...chips].slice(0, 3).map(cid => {
    const c = collections.find(x => x.id === cid);
    return c ? `<span class="chip small">${c.icon || 'üè∑Ô∏è'} ${escapeHtml(c.name)}</span>` : '';
  }).join(' ');

  return `
    <div class="book-card" data-book-id="${book.id}">
      <img src="${book.cover_url}" alt="${book.title}" onclick="showZoom('${book.cover_url}')" />

      <div class="info">
        <div class="card-actions-top">
          <button class="icon-btn" onclick="editBook('${book.id}')">‚úèÔ∏è</button>
          <button class="icon-btn" onclick="deleteBook('${book.id}')">üóëÔ∏è</button>
        </div>
        <div class="main-block">
          <b class="book-title multi">${book.title}</b>
          <i class="book-author">${book.author || ''}</i>
          ${chipsHtml ? `<div class="chips-row">${chipsHtml}</div>` : ''}
          ${book.rating ? `<div class="stars">${renderStars(book.rating)}</div>` : ""}
          ${book.started_at ? `<div>üìñ ${book.started_at}</div>` : ""}
          ${book.finished_at ? `<div>üèÅ ${book.finished_at}</div>` : ""}
          <div class="comment-preview">
            <button onclick="openComment('${book.id}')">üí¨ –ó–∞–º–µ—Ç–∫–∏</button>
          </div>
        </div>
      </div>
    </div>
  `;
}


// ‚≠ê –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∑–≤—ë–∑–¥–æ—á–µ–∫
function renderStars(rating = 0) {
  const fullStar = '‚òÖ';
  const emptyStar = '‚òÜ';
  return [...Array(5)].map((_, i) => i < rating ? fullStar : emptyStar).join('');
}

// üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏
window.openBook = function (id) {
  window.prevTabOnOpen = currentTab;   // –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
  window.lastOpenedBookId = id;               // —á—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏
  const book = books.find(b => String(b.id) === String(id));
  if (!book) { alert("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); return; }

  const container = document.getElementById("app");
  container.innerHTML = `
    <div id="book-list">
      ${renderBookCard(book)}
    </div>

    <div class="footer-buttons" style="margin-top: 12px;">
      <button onclick="focusBookInList('${book.id}')">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;
  // —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤—Å—ë –±—ã–ª–æ –≤–∏–¥–Ω–æ
  window.scrollTo({ top: 0, behavior: "instant" });
};



// ‚ûï –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
window.showAddForm = async function() {
  const container = document.getElementById("app");
  container.innerHTML = `
    <h2>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</h2>
    <form class="add-book-form" onsubmit="submitAddForm(event)">
      <div class="form-block">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</label>
        <input type="text" id="title" required autocomplete="off" />
        <div id="suggestions" class="suggestions-list"></div>
      </div>

      <div class="form-block">
        <label>–ê–≤—Ç–æ—Ä</label>
        <input type="text" id="author" required />
      </div>

      <div class="form-block">
        <label>–û–±–ª–æ–∂–∫–∞</label>
        <input type="file" id="cover_file" accept="image/*" />
        <input type="url" id="cover_url" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–æ–∂–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
        <img id="coverPreview" 
             style="
               max-height: 140px;
               max-width: 100%;
               margin-top: 8px;
               display: none;
               object-fit: contain;
               border-radius: 8px;
               box-shadow: 0 2px 6px rgba(0,0,0,0.15);
             " />
      </div>

      <div class="form-block">
        <label>–°—Ç–∞—Ç—É—Å</label>
        <select id="status">
          <option value="want_to_read">–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</option>
          <option value="reading">–ß–∏—Ç–∞—é</option>
          <option value="read">–ü—Ä–æ—á–∏—Ç–∞–ª</option>
        </select>
      </div>

      <div class="form-block">
        <label>–û—Ü–µ–Ω–∫–∞</label>
        <select id="rating">
          <option value="">–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</option>
          ${[1, 2, 3, 4, 5].map(n => `<option value="${n}">‚≠ê ${n}</option>`).join("")}
        </select>
      </div>

      <div class="form-block date-group">
        <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
        <input type="date" id="started_at" />
        <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
        <input type="date" id="finished_at" />
      </div>

<div class="form-block">
  <label>–ü–æ–ª–∫–∏</label>
  <div id="col-select" style="display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:8px"></div>
  <div style="display:flex;gap:8px;margin-top:6px;">
    <input id="quickShelfName" placeholder="–ë—ã—Å—Ç—Ä–∞—è –Ω–æ–≤–∞—è –ø–æ–ª–∫–∞" style="flex:1;padding:8px;border:1px solid #ddd;border-radius:8px;">
    <button type="button" id="quickShelfBtn">Ôºã –°–æ–∑–¥–∞—Ç—å</button>
  </div>
</div>

      <div class="form-buttons">
        <button type="submit" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button type="button" class="back-btn" onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
      </div>
    </form>
  `;
// –ø–æ–¥–≥—Ä—É–∑–∏–º –ø–æ–ª–∫–∏ –∏ —á–µ–∫–±–æ–∫—Å—ã
collections = await listCollections(userId);
document.getElementById('col-select').innerHTML = collections.map(c => `
  <label style="display:flex;align-items:center;gap:6px">
    <input type="checkbox" value="${c.id}"/>
    ${c.icon || 'üè∑Ô∏è'} ${escapeHtml(c.name)}
  </label>
`).join('');

// –±—ã—Å—Ç—Ä–∞—è –ø–æ–ª–∫–∞
document.getElementById('quickShelfBtn').onclick = async ()=>{
  const name = document.getElementById('quickShelfName').value.trim();
  if (!name) return;
  const created = await createCollection(userId, name);
  collections = await listCollections(userId);
  document.getElementById('col-select').innerHTML = collections.map(c => `
    <label style="display:flex;align-items:center;gap:6px">
      <input type="checkbox" value="${c.id}" ${created?.id===c.id?'checked':''}/>
      ${c.icon || 'üè∑Ô∏è'} ${escapeHtml(c.name)}
    </label>
  `).join('');
};

  
  // üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–Ω–∏–≥
  document.getElementById("title").addEventListener("input", handleBookSearch);

  // üì∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
  document.getElementById("cover_file").addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
      const preview = document.getElementById("coverPreview");
      preview.src = URL.createObjectURL(file);
      preview.style.display = "block";
    }
  });

  // üì∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ URL
  document.getElementById("cover_url").addEventListener("input", (e) => {
    const url = e.target.value.trim();
    const preview = document.getElementById("coverPreview");
    if (url) {
      preview.src = url;
      preview.style.display = "block";
    } else {
      preview.style.display = "none";
    }
  });

  // –î–∞—Ç–∞ –ü—Ä–æ—á—Ç–µ–Ω–∏—è
  document.getElementById("status").addEventListener("change", () => {
  const status = document.getElementById("status").value;
  const finishedInput = document.getElementById("finished_at");

  if (status === "read" && !finishedInput.value) {
    const today = new Date().toISOString().split("T")[0];
    finishedInput.value = today;
  }
});
};

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
window.submitAddForm = async function (e) {
  e.preventDefault();
  const tgUser = Telegram.WebApp.initDataUnsafe?.user || {};

  let coverUrl = document.getElementById("cover_url").value.trim();
  const file = document.getElementById("cover_file").files[0];
  if (file) {
    coverUrl = await uploadCover(file);
    if (!coverUrl) {
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
      return;
    }
  }

  const status = document.getElementById("status").value;
  const startedAt = document.getElementById("started_at").value || null;
  let finishedAt = document.getElementById("finished_at").value || null;

  if (status === "read" && !finishedAt) {
    finishedAt = new Date().toISOString().split("T")[0];
  }

  const ratingValue = document.getElementById("rating").value;

  // üîπ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  const normalize = (str) =>
    str.trim().replace(/\s+/g, " ").toLowerCase();

  const normalizeAuthor = (str) =>
    normalize(str).split(" ").sort().join(" ");

  const title = document.getElementById("title").value.trim();
  const author = document.getElementById("author").value.trim();

  const normTitle = normalize(title);
  const normAuthor = normalizeAuthor(author);

  const book = {
    id: crypto.randomUUID(),
    user_id: userId,
    username: tgUser?.username || "",
    user_first_name: tgUser?.first_name || "",
    title,
    author,
    cover_url: coverUrl || "",
    status,
    rating: ratingValue ? Number(ratingValue) : null,
    added_at: new Date().toISOString().split("T")[0],
    started_at: startedAt,
    finished_at: finishedAt
  };

  // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ books_library –±–µ–∑ –¥—É–±–ª–µ–π
await checkAndInsertLibraryBook(title, author, coverUrl);

  // üìå –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ —Ç—Ä–µ–∫–µ—Ä
 const newId = await addBook(book);
 if (!newId) { alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É'); return; }
 const ids = [...document.querySelectorAll('#col-select input:checked')].map(i=>i.value);
 if (ids.length) await setBookCollections(userId, newId, ids);
 currentTab = book.status;
 await focusBookInList(newId);
};

// ‚úèÔ∏è –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–Ω–∏–≥–∏
async function handleBookSearch(e) {
  const value = e.target.value.trim();
  const list = document.getElementById("suggestions");
  list.innerHTML = "";
  if (value.length < 4) return;

  const suggestions = await searchBooks(value);
  list.innerHTML = suggestions.map(
    book => `<div class="suggestion-item" onclick="selectBook('${book.title}', '${book.author}', '${book.cover_url || ""}')">${book.title} ‚Äî ${book.author}</div>`
  ).join("");
}

window.selectBook = function(title, author, coverUrl) {
  document.getElementById("title").value = title;
  document.getElementById("author").value = author;
  if (coverUrl) {
    document.getElementById("coverPreview").src = coverUrl;
    document.getElementById("coverPreview").style.display = "block";
    document.getElementById("cover_url").value = coverUrl;
  }
  document.getElementById("suggestions").innerHTML = "";
};

// ‚úèÔ∏è –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
window.editBook = async function(id) {
  window.prevTabOnOpen   = currentTab;
  window.lastOpenedBookId = id;

  const book = books.find(b => b.id === id);
  const container = document.getElementById("app");

  container.innerHTML = `
    <h2>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</h2>
    <form id="editForm" class="add-book-form">
      <div class="form-block">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</label>
        <input type="text" id="title" value="${book.title}" required />
      </div>

      <div class="form-block">
        <label>–ê–≤—Ç–æ—Ä</label>
        <input type="text" id="author" value="${book.author}" required />
      </div>

      <div class="form-block">
        <label>–û–±–ª–æ–∂–∫–∞</label>
        <input type="file" id="cover_file" accept="image/*" />
        <input type="url" id="cover_url" value="${book.cover_url || ''}" />
        <img id="coverPreview" 
             src="${book.cover_url || ''}" 
             style="max-height:140px;max-width:100%;margin-top:8px;${book.cover_url ? '' : 'display:none;'}object-fit:contain;border-radius:8px;box-shadow:0 2px 6px rgba(0,0,0,0.15);" />
      </div>

      <div class="form-block">
        <label>–°—Ç–∞—Ç—É—Å</label>
        <select id="status">
          <option value="want_to_read" ${book.status === 'want_to_read' ? 'selected' : ''}>–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</option>
          <option value="reading" ${book.status === 'reading' ? 'selected' : ''}>–ß–∏—Ç–∞—é</option>
          <option value="read" ${book.status === 'read' ? 'selected' : ''}>–ü—Ä–æ—á–∏—Ç–∞–ª</option>
        </select>
      </div>

      <div class="form-block">
        <label>–û—Ü–µ–Ω–∫–∞</label>
        <select id="rating">
          <option value="">–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</option>
          ${[1,2,3,4,5].map(n => `<option value="${n}" ${book.rating === n ? 'selected' : ''}>‚≠ê ${n}</option>`).join("")}
        </select>
      </div>

      <div class="form-block date-group">
        <label>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</label>
        <input type="date" id="added_at" value="${book.added_at || ''}" />
        <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
        <input type="date" id="started_at" value="${book.started_at || ''}" />
        <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
        <input type="date" id="finished_at" value="${book.finished_at || ''}" />
      </div>
            
<div class="form-block">
  <label>–ü–æ–ª–∫–∏</label>
  <div id="col-select" style="display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:8px"></div>
  <div style="display:flex;gap:8px;margin-top:6px;">
    <input id="quickShelfName" placeholder="–ë—ã—Å—Ç—Ä–∞—è –Ω–æ–≤–∞—è –ø–æ–ª–∫–∞" style="flex:1;padding:8px;border:1px solid #ddd;border-radius:8px;">
    <button type="button" id="quickShelfBtn">Ôºã –°–æ–∑–¥–∞—Ç—å</button>
  </div>
</div>

      <div class="form-buttons">
        <button type="submit" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button type="button" class="back-btn" id="backBtn">‚Üê –ù–∞–∑–∞–¥</button>
      </div>
    </form>
  `;
// –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–∫ –∏ –æ—Ç–º–µ—á–∞–µ–º —Ç–µ, –≥–¥–µ –∫–Ω–∏–≥–∞ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç
collections = await listCollections(userId);
const selected = new Set(await listBookCollections(id));
document.getElementById('col-select').innerHTML = collections.map(c => `
  <label style="display:flex;align-items:center;gap:6px">
    <input type="checkbox" value="${c.id}" ${selected.has(c.id) ? 'checked' : ''}/>
    ${c.icon || 'üè∑Ô∏è'} ${escapeHtml(c.name)}
  </label>
`).join('');
  
// ¬´–ë—ã—Å—Ç—Ä–∞—è –ø–æ–ª–∫–∞¬ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
document.getElementById('quickShelfBtn').onclick = async ()=>{
  const name = document.getElementById('quickShelfName').value.trim();
  if (!name) return;
  const created = await createCollection(userId, name);
  collections = await listCollections(userId);
  const sel = new Set([...document.querySelectorAll('#col-select input:checked')].map(i=>i.value));
  if (created?.id) sel.add(created.id);
  document.getElementById('col-select').innerHTML = collections.map(c => `
    <label style="display:flex;align-items:center;gap:6px">
      <input type="checkbox" value="${c.id}" ${sel.has(c.id)?'checked':''}/>
      ${c.icon || 'üè∑Ô∏è'} ${escapeHtml(c.name)}
    </label>
  `).join('');
};
  
    // –ø—Ä–µ–≤—å—é –æ–±–ª–æ–∂–∫–∏
  document.getElementById("cover_file").addEventListener("change", (e) => {
    const file = e.target.files[0];
    const preview = document.getElementById("coverPreview");
    if (file) { preview.src = URL.createObjectURL(file); preview.style.display = "block"; }
  });
  document.getElementById("cover_url").addEventListener("input", (e) => {
    const url = e.target.value.trim();
    const preview = document.getElementById("coverPreview");
    if (url) { preview.src = url; preview.style.display = "block"; } else { preview.style.display = "none"; }
  });

  // –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
  document.getElementById("status").addEventListener("change", () => {
    const status = document.getElementById("status").value;
    const finishedInput = document.getElementById("finished_at");
    if (status === "read" && !finishedInput.value) {
      finishedInput.value = new Date().toISOString().split("T")[0];
    }
  });

  // –ù–∞–∑–∞–¥
  document.getElementById("backBtn").addEventListener("click", () => {
    focusBookInList(window.lastOpenedBookId || id);
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  document.getElementById("editForm").addEventListener("submit", async function(e) {
    e.preventDefault();

    let coverUrl = document.getElementById("cover_url").value.trim();
    const file = document.getElementById("cover_file").files[0];
    if (file) coverUrl = await uploadCover(file);

    const updated = {
      title: document.getElementById("title").value.trim(),
      author: document.getElementById("author").value.trim(),
      cover_url: coverUrl,
      status: document.getElementById("status").value,
      rating: document.getElementById("rating").value ? Number(document.getElementById("rating").value) : null,
      comment: book.comment,
      added_at: document.getElementById("added_at").value || null,
      started_at: document.getElementById("started_at").value || null,
      finished_at: document.getElementById("finished_at").value || null
    };

    await updateBook(id, updated);
    // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª–æ–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
const ids = [...document.querySelectorAll('#col-select input:checked')].map(i => i.value);
await setBookCollections(userId, id, ids);
await focusBookInList(id);
      });
};



// üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
window.deleteBook = async function(id) {
  const book = books.find(b => b.id === id);
  const confirmDelete = confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.");
  if (!confirmDelete) return;

  // —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
if (book?.comment) {
  const images = (book.comment.match(/https?:\/\/[^\s)]+/g) || []).filter(url =>
    url.includes("/comments/")
  );

  for (const imgUrl of images) {
    await deleteCommentImage(imgUrl);
  }
}


  // —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
await deleteBook(id);
  
alert("üóë –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞");
  await focusBookInList(null);
};


// üìä –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (—Å–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ –º–µ—Å—è—Ü)
window.showStats = function () {
  const container = document.getElementById("app");

  // –ë–µ—Ä—ë–º –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ books —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
  const finished = books
    .filter(b => b.finished_at)
    .map(b => b.finished_at.slice(0, 7)); // 'YYYY-MM'

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: { '2025-01': 3, ... }
  const byMonth = finished.reduce((acc, ym) => {
    acc[ym] = (acc[ym] || 0) + 1;
    return acc;
  }, {});

  // –ü—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ –º–∞—Å—Å–∏–≤ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
  const rows = Object.entries(byMonth).sort((a, b) => a[0].localeCompare(b[0]));

  // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è ¬´–±–∞—Ä–æ–≤¬ª
  const max = rows.length ? Math.max(...rows.map(([, n]) => n)) : 0;

  container.innerHTML = `
    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è</h2>
    ${rows.length ? `
      <div style="display:flex; flex-direction:column; gap:8px;">
        ${rows.map(([ym, n]) => {
          const width = max ? Math.round((n / max) * 100) : 0;
          return `
            <div style="display:flex; align-items:center; gap:8px;">
              <div style="width:90px; font-family:monospace;">${ym}</div>
              <div style="flex:1; background:#eee; border-radius:6px; height:12px; overflow:hidden;">
                <div style="width:${width}%; height:100%; background:#007aff;"></div>
              </div>
              <div style="width:28px; text-align:right;">${n}</div>
            </div>
          `;
        }).join("")}
      </div>
    ` : `<p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–Ω–∏–≥ ‚Äî –Ω–µ—á–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å.</p>`}

    <div class="footer-buttons">
      <button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;
};





// üîç –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∏—Å–∫" ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞ + –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–Ω–∏–≥–∞–º
window.showSearch = async function () {
  const container = document.getElementById("app");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ 1 —Ä–∞–∑, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (!window.books || window.books.length === 0) {
    window.books = await getBooks(userId);
  }

  container.innerHTML = `
    <h2>üîç –ü–æ–∏—Å–∫</h2>

    <div id="searchWrap" style="position:relative; margin-bottom:12px;">
      <input id="searchInput" placeholder="–ù–∞—á–Ω–∏ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞‚Ä¶" autocomplete="off"
        style="width:100%; padding:10px 12px; border-radius:8px; border:1px solid #ccc; outline:none;" />

      <div id="typeahead"
        style="position:absolute; z-index:1000; top:100%; left:0; right:0;
               background:#fff; border:1px solid #ddd; border-top:none; border-radius:0 0 8px 8px;
               max-height:280px; overflow-y:auto; display:none; box-shadow:0 8px 24px rgba(0,0,0,.06);">
      </div>
    </div>

    <div class="footer-buttons">
      <button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;

  const input = document.getElementById("searchInput");
  const dd    = document.getElementById("typeahead");

  // ---------- utils ----------
  const norm = (s) => (s ?? "").toString().toLowerCase().replaceAll("—ë","–µ").trim();
  const esc  = (s="") => s.replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
  function highlight(text, q) {
    const base = esc(text || "");
    const terms = norm(q).split(/\s+/).filter(Boolean);
    if (!terms.length) return base;
    const pattern = terms.map(t => t.replace(/[.*+?^${}()|[\]\\]/g,'\\$&')).join("|");
    return base.replace(new RegExp(`(${pattern})`, "gi"), "<mark>$1</mark>");
  }

  // –ü–æ–∏—Å–∫ –ø–æ title+author(+category/note/tags) c AND-–ª–æ–≥–∏–∫–æ–π; —Ç–æ–ø-10
  function searchLocal(q) {
    const terms = norm(q).split(/\s+/).filter(Boolean);
    if (!terms.length) return [];

    return window.books
      .map(b => {
        const hay = norm([b.title, b.author, b.category, b.note, Array.isArray(b.tags)? b.tags.join(" "):""].join("  "));
        const ok = terms.every(t => hay.includes(t));
        if (!ok) return null;

        // –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: —Ä–∞–Ω—å—à–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ title ‚Äî –≤—ã—à–µ
        const idxTitle  = norm(b.title || "").indexOf(norm(q));
        const idxAuthor = norm(b.author || "").indexOf(norm(q));
        const score = (idxTitle === -1 ? 1000 : idxTitle) + (idxAuthor === -1 ? 500 : idxAuthor);
        return { b, score };
      })
      .filter(Boolean)
      .sort((a,b) => a.score - b.score)
      .slice(0, 10)
      .map(x => x.b);
  }

  // ---------- dropdown render + –ø–æ–≤–µ–¥–µ–Ω–∏–µ ----------
  let suggestions = [];
  let active = -1; // –∏–Ω–¥–µ–∫—Å –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

  function hideDD() { dd.style.display = "none"; active = -1; }
  function showDD() { dd.style.display = suggestions.length ? "block" : "none"; }

  function renderDD(q) {
    if (!suggestions.length) {
      dd.innerHTML = `<div style="padding:10px 12px; color:#777;">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>`;
      dd.style.display = "block";
      return;
    }
    dd.innerHTML = suggestions.map((b, i) => `
      <div class="ta-item" data-id="${b.id}"
           style="display:flex; gap:10px; align-items:center; padding:10px 12px; cursor:pointer;
                  ${i===active ? 'background:#f5f7ff;' : ''}">
        ${b.cover_url ? `<img src="${esc(b.cover_url)}" alt="" style="width:32px;height:48px;object-fit:cover;border-radius:4px;border:1px solid #eee;">` : ''}
        <div style="min-width:0;">
          <div style="font-weight:600; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
            ${highlight(b.title, q)}
          </div>
          <div style="font-size:12px; opacity:.8; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
            ${highlight(b.author || "", q)}
          </div>
        </div>
      </div>
    `).join("");

    // –∫–ª–∏–∫–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º
    dd.querySelectorAll(".ta-item").forEach((el, i) => {
      el.addEventListener("mouseenter", () => { active = i; paintActive(); });
      el.addEventListener("mousedown", (e) => { // mousedown, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ñ–æ–∫—É—Å –¥–æ click
        e.preventDefault();
        const id = el.getAttribute("data-id");
        if (typeof openBook === "function") openBook(id);
      });
    });

    showDD();
  }

  function paintActive() {
    [...dd.children].forEach((el, i) => {
      el.style.background = (i===active) ? "#f5f7ff" : "";
    });
  }

  const debouncedSearch = (fn => {
    let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), 180); };
  })(q => {
    if (q.length < 2) { hideDD(); return; }
    suggestions = searchLocal(q);
    active = suggestions.length ? 0 : -1;
    renderDD(q);
    paintActive();
  });

  // ---------- handlers ----------
  input.addEventListener("input", (e) => debouncedSearch(e.target.value));
  input.addEventListener("focus", () => {
    if (input.value.trim().length >= 2) { suggestions = searchLocal(input.value); renderDD(input.value); paintActive(); }
  });
  input.addEventListener("keydown", (e) => {
    const q = input.value.trim();
    if (e.key === "ArrowDown") {
      if (!suggestions.length) return;
      e.preventDefault();
      active = (active + 1) % suggestions.length; paintActive();
      dd.children[active]?.scrollIntoView({ block: "nearest" });
    }
    if (e.key === "ArrowUp") {
      if (!suggestions.length) return;
      e.preventDefault();
      active = (active - 1 + suggestions.length) % suggestions.length; paintActive();
      dd.children[active]?.scrollIntoView({ block: "nearest" });
    }
    if (e.key === "Enter") {
      if (active >= 0 && suggestions[active]) {
        e.preventDefault();
        const id = suggestions[active].id;
        if (typeof openBook === "function") openBook(id);
      }
    }
    if (e.key === "Escape") {
      input.value = "";
      hideDD();
    }
  });

  // –∫–ª–∏–∫ –≤–Ω–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫
  document.addEventListener("click", (e) => {
    if (!document.getElementById("searchWrap")) return; // —ç–∫—Ä–∞–Ω —Å–º–µ–Ω–∏–ª–∏
    if (!document.getElementById("searchWrap").contains(e.target)) hideDD();
  }, { capture: true });
};

window.lastOpenedBookId = null;

window.focusBookInList = async function (bookId) {
  // –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è)
  books = await getBooks(userId);
  
  // üëâ —Å–ª—É—á–∞–π —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ ¬´–ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è¬ª
  if (!bookId) {
    if (window.prevTabOnOpen) currentTab = window.prevTabOnOpen; // –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    await renderMainScreen();
    window.prevTabOnOpen = null;
    return;
  }

  // üëâ –æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ, –ø–µ—Ä–µ–∫–ª—é—á–∏–≤ –≤–∫–ª–∞–¥–∫—É –ø–æ –µ—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
  const book = books.find(b => String(b.id) === String(bookId));
  await renderMainScreen(); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Ç—Ä–∏—Å—É–µ–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–∏–≥—É
  if (!book) return;

  currentTab = book.status || currentTab;
  await renderMainScreen();

  // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–∏–≥–µ
  await new Promise(r => requestAnimationFrame(() => requestAnimationFrame(r)));
  const el = document.querySelector(`[data-book-id="${bookId}"]`);
  if (el) {
    el.classList.add('book-focus');
    el.scrollIntoView({ block: 'center', behavior: 'smooth' });
    setTimeout(() => el.classList.remove('book-focus'), 1600);
  }
};

  





  // ‚úÖ –ñ—ë—Å—Ç–∫–∏–π –Ω–∞–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –∏ –ø–æ—Ä—è–¥–æ–∫
const EXPORT_COLS = [
  { key: 'title',       label: '–ù–∞–∑–≤–∞–Ω–∏–µ',   get: b => b.title ?? '' },
  { key: 'author',      label: '–ê–≤—Ç–æ—Ä',      get: b => b.author ?? '' },
  { key: 'status',      label: '–°—Ç–∞—Ç—É—Å',     get: b => b.status ?? '' },
  { key: 'rating',      label: '–û—Ü–µ–Ω–∫–∞',     get: b => b.rating ?? '' },
  { key: 'started_at',  label: '–ù–∞—á–∞–ª',      get: b => b.started_at ?? '' },
  { key: 'finished_at', label: '–ó–∞–∫–æ–Ω—á–∏–ª',   get: b => b.finished_at ?? '' },
  { key: 'comment',     label: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',get: b => (b.comment ?? '').replace(/\r?\n/g,' ') },
  // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å: category, tags, added_at –∏ —Ç.–¥.
];
// üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV/JSON
  
function escapeCsv(v) {
  return `"${String(v ?? '').replace(/"/g,'""')}"`;
}
async function exportToCSV(data) {
  if (!data?.length) { alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"); return; }
  const header = EXPORT_COLS.map(c => c.label);
  const rows = data.map(b => EXPORT_COLS.map(c => escapeCsv(c.get(b))));
  const bom = "\uFEFF";
  const csvContent = bom + [header.join(','), ...rows.map(r => r.join(','))].join('\n');
  await uploadAndShare(csvContent, `books-${userId}.csv`, 'text/csv');
}

async function exportToJSON(data) {
  const slim = (data ?? []).map(b =>
    Object.fromEntries(EXPORT_COLS.map(c => [c.key, c.get(b)]))
  );
  const jsonContent = JSON.stringify(slim, null, 2);
  await uploadAndShare(jsonContent, `books-${userId}.json`, 'application/json');
}

// ‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ (Telegram-friendly)
async function uploadAndShare(content, filename, type) {
  const ts = new Date().toISOString().replace(/[:.]/g, "-");
  const finalName = filename.replace(/(\.\w+)$/, `-${ts}$1`);
  const blob = new Blob([content], { type: `${type}; charset=utf-8` });

  // üëá —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è: —Ç–µ–ø–µ—Ä—å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ uploadExportFile(userId, ...)
  const publicUrl = await uploadExport(userId, finalName, blob, type);
  if (!publicUrl) {
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞");
    return;
  }

  // —Ñ–æ—Ä—Å-—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
  const dlUrl = publicUrl + (publicUrl.includes("?") ? "&" : "?") +
                "download=" + encodeURIComponent(finalName);

  // üîë –ö–õ–Æ–ß–ï–í–û–ï: –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º
  const tg = window.Telegram?.WebApp;
  if (tg?.openLink) {
    tg.openLink(dlUrl); // –æ—Ç–∫—Ä–æ–µ—Ç Safari/Chrome —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  } else {
    // –¥–µ—Å–∫—Ç–æ–ø/–æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
    window.open(dlUrl, "_blank", "noopener,noreferrer");
  }
}


renderMainScreen();

// üì∏ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Supabase Storage –ø–æ URL
async function deleteImageFromSupabase(imageUrl) {
  try {
    if (!imageUrl.includes("/comments/")) return;

    const fileName = decodeURIComponent(imageUrl.split("/").pop());
    await deleteImageFromStorage("comments", fileName);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è:", err);
  }
}

// üí¨ –û—Ç–∫—Ä—ã—Ç–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∫–Ω–∏–≥–µ —á–µ—Ä–µ–∑ Toast UI Editor
window.openComment = function(bookId, readonly = true) {
  window.prevTabOnOpen   = currentTab;
  window.lastOpenedBookId = bookId;
  const book = books.find(b => b.id === bookId);
  const container = document.getElementById("app");

  container.innerHTML = `
    <h2>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–Ω–∏–≥–µ</h2>
    <b>${book.title}</b> <i>(${book.author})</i><br/><br/>
    <div id="toastEditor"></div>

    <div class="comment-actions">
      ${readonly
        ? `<button onclick="openComment('${bookId}', false)">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>`
        : `<button onclick="saveComment('${book.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>`
      }
      <button onclick="focusBookInList(window.lastOpenedBookId)">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;

  if (readonly) {
    toastui.Editor.factory({
      el: document.querySelector('#toastEditor'),
      viewer: true,
      initialValue: book.comment || "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω."
    });
  } else {
window.toastEditor = new toastui.Editor({
  el: document.querySelector('#toastEditor'),
  height: '400px',
  language: 'ru',
  initialEditType: 'wysiwyg',
  previewStyle: 'vertical',
  initialValue: book.comment || "",
  toolbarItems: [
    ['heading', 'bold', 'italic', 'strike'],
    ['hr', 'quote'],
    ['ul', 'ol', 'task'],
    ['table', 'link', 'image'],
    // üëâ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ Undo/Redo
    [{
      name: 'undo',
      tooltip: '–û—Ç–º–µ–Ω–∏—Ç—å',
      className: 'toastui-editor-toolbar-icons undo',
      command: 'undo',
      text: '‚Ü©Ô∏è'
    },
    {
      name: 'redo',
      tooltip: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
      className: 'toastui-editor-toolbar-icons redo',
      command: 'redo',
      text: '‚Ü™Ô∏è'
    }]
  ],
  hooks: {
    addImageBlobHook: async (blob, callback) => {
      const url = await uploadCommentImage(blob);
      callback(url, '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  }
});


    // üí° –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
    const fixPopupPosition = () => {
      const popups = document.querySelectorAll('.toastui-editor-popup');
      popups.forEach(popup => {
        const rect = popup.getBoundingClientRect();
if (rect.left < 0 || rect.right > window.innerWidth) {
  const shift = Math.min(Math.abs(rect.left), rect.right - window.innerWidth);
  popup.style.transform = `translateX(${-shift - 12}px)`;
}

      });
    };

    const observer = new MutationObserver(() => fixPopupPosition());
    observer.observe(document.body, { childList: true, subtree: true });

    // —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ timeout (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞ –º—É—Ç–∞—Ü–∏–∏)
  setTimeout(fixPopupPosition, 300);
  setTimeout(fixPopupPosition, 800); // —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–∑–æ–≤
  }
};

window.showCollections = async function() {
  // –Ω–∞ –≤—Å—è–∫–∏–π: –æ—Å–≤–µ–∂–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–∫
  collections = await listCollections(userId);

  const container = document.getElementById('app');
  container.innerHTML = `
    <h2>üè∑Ô∏è –ü–æ–ª–∫–∏</h2>

    <div style="display:flex;gap:8px; margin-bottom:12px;">
      <input id="newShelfName" placeholder="–ù–æ–≤–∞—è –ø–æ–ª–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–ª–∞—Å—Å–∏–∫–∞)" style="flex:1;padding:10px;border-radius:8px;border:1px solid #ddd;">
      <button id="createShelfBtn">Ôºã –°–æ–∑–¥–∞—Ç—å</button>
    </div>

    <div id="shelvesList">
      ${collections.length ? collections.map(c => `
        <div class="shelf-row" data-id="${c.id}" style="display:flex;align-items:center;gap:8px; padding:10px; border:1px solid #eee; border-radius:8px; margin-bottom:8px;">
          <div style="flex:1; font-weight:600;">${c.icon || 'üè∑Ô∏è'} ${escapeHtml(c.name)}</div>
          <button class="rename">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</button>
          <button class="delete" style="color:#b91c1c;">–£–¥–∞–ª–∏—Ç—å</button>
          <button class="open">–û—Ç–∫—Ä—ã—Ç—å</button>
        </div>
      `).join('') : `<div style="opacity:.7">–ü–æ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>`}
    </div>

    <div class="footer-buttons" style="margin-top:12px;">
      <button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;

  // —Å–æ–∑–¥–∞—Ç—å
  document.getElementById('createShelfBtn').onclick = async () => {
    const name = document.getElementById('newShelfName').value.trim();
    if (!name) return;
    const created = await createCollection(userId, name);
    if (created?.id) {
      collections = await listCollections(userId);
      showCollections();
    }
  };

  // –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  container.querySelector('#shelvesList').addEventListener('click', async (e)=>{
    const row = e.target.closest('.shelf-row'); if (!row) return;
    const id = row.dataset.id;

    if (e.target.classList.contains('rename')) {
      const cur = collections.find(x=>x.id===id);
      const name = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∫–∏', cur?.name || '');
      if (name && name.trim()) { await renameCollection(id, { name: name.trim() }); showCollections(); }
      return;
    }
    if (e.target.classList.contains('delete')) {
      if (confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–∫—É? –ö–Ω–∏–≥–∏ –Ω–µ —É–¥–∞–ª—è—Ç—Å—è.')) { await deleteCollection(id); showCollections(); }
      return;
    }
if (e.target.classList.contains('open')) {
  currentCollectionId = id;
  saveCurrentCollection();          // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  renderMainScreen();
  return;
}
  });
};




// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
window.saveComment = async function(bookId) {
  const book = books.find(b => b.id === bookId);
  const oldComment = book?.comment || "";
  const newComment = toastEditor.getMarkdown();

  // –Ω–∞—Ö–æ–¥–∏–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  const oldImages = (oldComment.match(/https?:\/\/[^\s)]+/g) || []).filter(url => url.includes("/comments/"));
  const newImages = (newComment.match(/https?:\/\/[^\s)]+/g) || []).filter(url => url.includes("/comments/"));
  const removedImages = oldImages.filter(url => !newImages.includes(url));

  // —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ storage
  for (const imgUrl of removedImages) {
    await deleteImageFromSupabase(imgUrl);
  };

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
await saveComment(bookId, userId, newComment);
await focusBookInList(bookId);
 };

(function enableCollectionsDelegation() {
  const root = document.getElementById('app');
  if (!root || root.dataset.collectionsBound === '1') return;
  root.dataset.collectionsBound = '1';

  root.addEventListener('click', (e) => {
    const chip = e.target.closest('.collections-bar .chip');
    if (!chip) return;

    // ¬´–í—Å–µ –ø–æ–ª–∫–∏¬ª ‚Äî –¢–û–õ–¨–ö–û —Å–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä (–Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä)
    if (chip.id === 'manageCollectionsBtn') {
  e.preventDefault();
  currentCollectionId = null;
  saveCurrentCollection();          // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  renderMainScreen();
  return;
}

// –û–±—ã—á–Ω–∞—è –ø–æ–ª–∫–∞ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
const id = chip.getAttribute('data-id');
if (!id) return;
currentCollectionId = (String(currentCollectionId) === String(id)) ? null : id;
saveCurrentCollection();            // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º
renderMainScreen();
  });

  // –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª–æ–∫ (—Å–º. –Ω–∏–∂–µ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ)
  root.addEventListener('click', (e) => {
    const btn = e.target.closest('#openCollectionsManagerBtn');
    if (!btn) return;
    e.preventDefault();
    e.stopPropagation();
    showCollections();
  });
})();

window.showFriends = async function() {
  const container = document.getElementById('app');
  const friends = await listFriends(userId);
  const reading = await friendsReadingNow(userId); // –∫–Ω–∏–≥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º reading
  const readingMap = new Map(reading.map(b => [b.user_id, b]));

  const requests = await listFriendRequests(userId);

  container.innerHTML = `
    <h2>üë• –î—Ä—É–∑—å—è</h2>

    <div style="display:flex;gap:8px;margin:8px 0 16px;">
      <input id="addByUsername" placeholder="–î–æ–±–∞–≤–∏—Ç—å –ø–æ @username" style="flex:1;padding:10px;border:1px solid #ddd;border-radius:8px;">
      <button id="sendReq">–î–æ–±–∞–≤–∏—Ç—å</button>
    </div>
    
<div style="display:flex;gap:8px; margin:8px 0;">
  <button id="makeCodeBtn">–ú–æ–π –∫–æ–¥</button>
  <div id="myCodeWrap" style="display:none; align-items:center; gap:8px;">
    <code id="myCode" style="font-weight:700;"></code>
    <button id="copyMyCode">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
    <button id="shareMyCode">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button>
  </div>
</div>
<div style="display:flex;gap:8px; margin:8px 0 16px;">
  <input id="friendCodeInput" placeholder="–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞" style="flex:1;padding:10px;border:1px solid #ddd;border-radius:8px;">
  <button id="useCodeBtn">–î–æ–±–∞–≤–∏—Ç—å –ø–æ –∫–æ–¥—É</button>
</div>

    ${requests.requests.length ? `
      <h3>–ó–∞—è–≤–∫–∏</h3>
      <div>${requests.requests.map(r => {
        const p = requests.profiles.find(x => x.user_id === r.from_user);
        const name = p?.name || ('@' + (p?.username || 'user'));
        return `<div style="display:flex;gap:8px;align-items:center;margin:6px 0;">
          <div style="flex:1;">${name}</div>
          <button onclick="respondFriend('${r.id}', true)">–ü—Ä–∏–Ω—è—Ç—å</button>
          <button onclick="respondFriend('${r.id}', false)">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
        </div>`;
      }).join('')}</div>
    ` : ''}
    

    <h3>–ú–æ–∏ –¥—Ä—É–∑—å—è</h3>
    <div>
      ${friends.length ? friends.map(f => {
        const b = readingMap.get(f.user_id);
        return `<div class="friend-row" style="display:flex;align-items:center;gap:10px;padding:8px;border:1px solid #eee;border-radius:10px;margin-bottom:8px;">
          <div style="flex:1;">
            <div style="font-weight:600;">${f.name || '@'+(f.username||'user')}</div>
            ${b ? `<div style="opacity:.8;">–ß–∏—Ç–∞–µ—Ç: ${b.title} ‚Äî ${b.author||''}</div>` : `<div style="opacity:.7;">–ù–µ —á–∏—Ç–∞–µ—Ç —Å–µ–π—á–∞—Å</div>`}
          </div>
          ${b ? `<button onclick="startGroupWithFriend('${f.user_id}', '${b.title}', '${b.author||''}', '${b.cover_url||''}')">üìö –ß–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ</button>` : ''}
        </div>`;
      }).join('') : '<div>–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</div>'}
    </div>

    <div class="footer-buttons"><button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button></div>
  `;

 const wrap = document.getElementById('myCodeWrap');
document.getElementById('makeCodeBtn').onclick = async () => {
  const r = await createFriendInvite(userId);
  if (r?.code) {
    const link = makeFriendLink(r.code);
    // —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ Telegram (–µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞)
    const tg = window.Telegram?.WebApp;
    if (tg?.openTelegramLink) tg.openTelegramLink(link);
    else if (navigator.share) navigator.share({ url: link });
    else {
      await navigator.clipboard.writeText(link);
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
    }
  } else {
    alert(r?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥');
  }
};
 
document.getElementById('copyMyCode').onclick = () => {
  const c = document.getElementById('myCode').textContent;
  if (c) navigator.clipboard.writeText(c);
};
document.getElementById('shareMyCode').onclick = () => {
  const c = document.getElementById('myCode').textContent.trim();
  if (!c) return;
  const link = makeFriendLink(c);
  const text = `–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –¥—Ä—É–∑—å—è –≤ Book Tracker: ${link}`;

  // 1) –µ—Å–ª–∏ Mini App –≤–Ω—É—Ç—Ä–∏ Telegram-–∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –æ—Ç–∫—Ä–æ–µ–º —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ –≤ Telegram
  const tg = window.Telegram?.WebApp;
  if (tg?.openTelegramLink) {
    tg.openTelegramLink(link);
    return;
  }

  // 2) –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω—ã–π share (–º–æ–±–∏–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
  if (navigator.share) {
    navigator.share({ text, url: link }).catch(()=>{});
    return;
  }

  // 3) –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
  navigator.clipboard.writeText(text)
    .then(()=> alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞'))
    .catch(()=> window.prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:', link));
};
 
document.getElementById('useCodeBtn').onclick = async () => {
  const code = document.getElementById('friendCodeInput').value.trim();
  if (!code) return;
  const r = await acceptFriendInvite(code, userId);
  if (r?.success) { alert('–ì–æ—Ç–æ–≤–æ! –í—ã —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è.'); showFriends(); }
  else alert(r?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∫–æ–¥');
};


  document.getElementById('sendReq').onclick = async () => {
    const u = document.getElementById('addByUsername').value.trim();
    if (!u) return;
    const r = await sendFriendRequest(userId, u);
    alert(r.error || '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    showFriends();
  };
};

window.respondFriend = async function(reqId, ok) {
  await respondFriendRequest(reqId, !!ok);
  showFriends();
};

window.startGroupWithFriend = async function(friendId, title, author, cover) {
  const g = await createGroup(userId, '–î—É—ç—Ç —á—Ç–µ–Ω–∏—è');
  await joinGroup(friendId, g.invite_code); // –µ—Å–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—Ç upsert
  const gb = await setGroupBook(g.group_id, { title, author, cover_url: cover });
  // –æ—Ç–∫—Ä–æ–µ–º –≥—Ä—É–ø–ø—É:
  showGroup(g.group_id);
};

window.showGroup = async function(groupId) {
  const container = document.getElementById('app');
  const data = await groupDashboard(groupId);

  const book = data?.book;
  const members = data?.members || [];
  const profMap = new Map(data?.profiles.map(p => [p.user_id, p]) || []);
  const progMap = new Map((data?.progress || []).map(p => [p.user_id, p]));

  container.innerHTML = `
    <h2>üë• –ì—Ä—É–ø–ø–∞</h2>

    ${book ? `
      <div class="group-book" style="padding:12px;border:1px solid #eee;border-radius:12px;margin-bottom:12px;">
        <div style="font-weight:700;">${book.title}</div>
        <div style="opacity:.8;">${book.author||''}</div>
        ${book.start_at ? `<div>–°—Ç–∞—Ä—Ç: ${book.start_at}</div>`:''}
        ${book.end_at ? `<div>–î–µ–¥–ª–∞–π–Ω: ${book.end_at}</div>`:''}
      </div>
    ` : `
      <div>–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–∏–≥–∏. <button onclick="promptSetGroupBook('${groupId}')">–í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É</button></div>
    `}

    <h3>–ü—Ä–æ–≥—Ä–µ—Å—Å</h3>
    <div>
      ${members.map(m => {
        const p = profMap.get(m.user_id);
        const pr = progMap.get(m.user_id);
        const pct = pr?.progress_pct ?? (pr?.current_page && pr?.total_pages ? Math.round(100*pr.current_page/pr.total_pages) : 0);
        return `<div style="display:flex;align-items:center;gap:10px;margin:6px 0;">
          <div style="flex:1;">
            <div>${p?.name || '@'+(p?.username||'user')}</div>
            <div style="height:8px;border-radius:999px;background:#eee;overflow:hidden;">
              <div style="height:8px;width:${pct||0}%;background:#60a5fa;"></div>
            </div>
          </div>
          ${String(m.user_id)===String(userId) && book ? `
            <button onclick="promptUpdateProgress('${book.id||''}','${groupId}','${book.id? '': (data.book.id)}','${data.book.id}')">–û–±–Ω–æ–≤–∏—Ç—å</button>
          ` : ''}
        </div>`;
      }).join('')}
    </div>

    <div class="footer-buttons"><button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button></div>
  `;
};

window.promptSetGroupBook = async function(groupId) {
  const title = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–µ–¥–µ–ª–∏');
  if (!title) return;
  const author = prompt('–ê–≤—Ç–æ—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)') || '';
  const gb = await setGroupBook(groupId, { title, author });
  showGroup(groupId);
};

window.promptUpdateProgress = async function(_bookId, groupId, _x, groupBookId) {
  const mode = confirm('–û–∫ ‚Äî –ø—Ä–æ—Ü–µ–Ω—Ç—ã. –û—Ç–º–µ–Ω–∞ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
  if (mode) {
    const pct = Number(prompt('–ü—Ä–æ–≥—Ä–µ—Å—Å, % (0-100)') || '0');
    await updateGroupProgress(groupBookId, userId, { progress_pct: Math.max(0, Math.min(100, pct)) });
  } else {
    const cur = Number(prompt('–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞') || '0');
    const tot = Number(prompt('–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü') || '0');
    await updateGroupProgress(groupBookId, userId, { current_page: cur, total_pages: tot });
  }
  showGroup(groupId);
};

window.showGroups = async function() {
  const gs = await listGroups(userId);
  const container = document.getElementById('app');
  container.innerHTML = `
    <h2>üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã</h2>
    <div style="display:flex;gap:8px;margin:8px 0 16px;">
      <input id="groupName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" style="flex:1;padding:10px;border:1px solid #ddd;border-radius:8px;">
      <button id="createGroupBtn">–°–æ–∑–¥–∞—Ç—å</button>
    </div>
    <div style="display:flex;gap:8px;margin:8px 0 16px;">
      <input id="inviteCode" placeholder="–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è" style="flex:1;padding:10px;border:1px solid #ddd;border-radius:8px;">
      <button id="joinBtn">–í—Å—Ç—É–ø–∏—Ç—å</button>
    </div>
    <div>
      ${gs.length ? gs.map(g => `
        <div style="padding:10px;border:1px solid #eee;border-radius:10px;display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
          <div><b>${g.name}</b> ¬∑ ${g.members_count||1} —É—á–∞—Å—Ç–Ω.</div>
          <div style="display:flex;gap:8px;">
            <button onclick="showGroup('${g.id}')">–û—Ç–∫—Ä—ã—Ç—å</button>
            <button onclick="navigator.clipboard.writeText('${g.invite_code||''}'); alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');">–ö–æ–¥</button>
          </div>
        </div>
      `).join('') : '<div>–ü–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø</div>'}
    </div>
    <div class="footer-buttons"><button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button></div>
  `;

  document.getElementById('createGroupBtn').onclick = async ()=>{
    const name = document.getElementById('groupName').value.trim();
    if (!name) return;
    const info = await createGroup(userId, name);
    alert('–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–¥: ' + info.invite_code);
    showGroups();
  };
  document.getElementById('joinBtn').onclick = async ()=>{
    const code = document.getElementById('inviteCode').value.trim();
    if (!code) return;
    const info = await joinGroup(userId, code);
    showGroups();
  };
};

