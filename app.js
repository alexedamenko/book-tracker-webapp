// üìÅ app.js ‚Äî –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ WebApp

// üõ† –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
import {
  getBooks,
  addBook,
  uploadExportFile,
  exportBooks,
  updateBook,
  deleteBook,
  saveComment,
  checkAndInsertLibraryBook
} from './api.js';

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp Telegram –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ Telegram
Telegram.WebApp.ready();
if (!Telegram.WebApp.initDataUnsafe?.user?.id) {
  alert("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram");
  throw new Error("WebApp –∑–∞–ø—É—â–µ–Ω –≤–Ω–µ Telegram");
}
const userId = Telegram.WebApp.initDataUnsafe.user.id.toString();

// üìö –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
let books = [];
let currentTab = "read";

// üîÅ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ —Å –∫–Ω–∏–≥–∞–º–∏
window.renderMainScreen = async function () {
  books = await getBooks(userId);
  const container = document.getElementById("app");
  const filtered = books.filter(b => b.status === currentTab);

  container.innerHTML = `
    <h2>üìò –ú–æ–π –∫–Ω–∏–∂–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä</h2>

    <div class="nav-tabs">
      <div class="nav-tab ${currentTab === 'reading' ? 'active' : ''}" onclick="switchTab('reading')">–ß–∏—Ç–∞—é</div>
      <div class="nav-tab ${currentTab === 'read' ? 'active' : ''}" onclick="switchTab('read')">–ü—Ä–æ—á–∏—Ç–∞–ª</div>
      <div class="nav-tab ${currentTab === 'want_to_read' ? 'active' : ''}" onclick="switchTab('want_to_read')">–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</div>
    </div>

    <button onclick="showAddForm()">+ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É</button>

    <div id="book-list">
      ${filtered.length > 0 ? filtered.map(renderBookCard).join("") : "<p>üì≠ –ù–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>"}
    </div>

    <div class="footer-buttons">
      <button id="exportBtn">üì§Export</button>
      <div id="formatMenu" class="hidden">
        <div class="format-option" data-format="csv">CSV</div>
        <div class="format-option" data-format="json">JSON</div>
      </div>
      <button onclick="showStats()">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
      <button onclick="showSearch()">üîç –ü–æ–∏—Å–∫ / —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</button>
    </div>
  `;

  // ‚¨áÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
  document.getElementById("exportBtn").addEventListener("click", () => {
    document.getElementById("formatMenu").classList.toggle("hidden");
  });

  document.querySelectorAll(".format-option").forEach(option => {
    option.addEventListener("click", async () => {
      const format = option.getAttribute("data-format");
      document.getElementById("formatMenu").classList.add("hidden");

      const data = await exportBooks(userId);
if (!data || !data.length) {
  alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
  return;
}

      if (format === "csv") exportToCSV(data);
      if (format === "json") exportToJSON(data);
    });
  });
}


// ‚òëÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
window.switchTab = function (tab) {
  currentTab = tab;
  renderMainScreen();
};

// üì∑ –ó—É–º –æ–±–ª–æ–∂–∫–∏ (–æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–º–µ—Å—Ç–æ —Ç—Ä—ë—Ö)
window.showZoom = function (url) {
  const overlay = document.getElementById("zoom-overlay");
  const img = document.getElementById("zoom-image");
  img.src = url;
  overlay.classList.remove("hidden");
};

window.closeZoom = function () {
  document.getElementById("zoom-overlay").classList.add("hidden");
};

// üß© –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏ (–æ–±–ª–æ–∂–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥, –¥–∞—Ç—ã –∏ –∑–∞–º–µ—Ç–∫–∞)
function renderBookCard(book) {
   return `
    <div class="book-card">
      <img src="${book.cover_url}" alt="${book.title}" onclick="showZoom('${book.cover_url}')" />
      
      <div class="info">
       <div class="card-actions-top">
          <button class="icon-btn" onclick="editBook('${book.id}')">‚úèÔ∏è</button>
          <button class="icon-btn" onclick="deleteBook('${book.id}')">üóëÔ∏è</button>
        </div>
        <div class="main-block">
          <b class="book-title">${book.title}</b>
          <i class="book-author">${book.author}</i>
          ${book.rating ? `<div class="stars">${renderStars(book.rating)}</div>` : ""}
          ${book.started_at ? `<div>üìñ ${book.started_at}</div>` : ""}
          ${book.finished_at ? `<div>üèÅ ${book.finished_at}</div>` : ""}
          <div class="comment-preview">
            <button onclick="openComment('${book.id}')">üí¨ –ó–∞–º–µ—Ç–∫–∏/–í—ã–≤–æ–¥—ã</button>
                  </div>
              </div>
         </div>
    </div>
  `;
}

// ‚≠ê –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∑–≤—ë–∑–¥–æ—á–µ–∫
function renderStars(rating = 0) {
  const fullStar = '‚òÖ';
  const emptyStar = '‚òÜ';
  return [...Array(5)].map((_, i) => i < rating ? fullStar : emptyStar).join('');
}

// ‚ûï –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
window.showAddForm = function() {
  const container = document.getElementById("app");
  container.innerHTML = `
    <h2>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</h2>
    <form class="add-book-form" onsubmit="(event)">
      <div class="form-block">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</label>
        <input type="text" id="title" required autocomplete="off" />
        <div id="suggestions" class="suggestions-list"></div>
      </div>

      <div class="form-block">
        <label>–ê–≤—Ç–æ—Ä</label>
        <input type="text" id="author" required />
      </div>

      <div class="form-block">
        <label>–û–±–ª–æ–∂–∫–∞</label>
        <input type="file" id="cover_file" accept="image/*" />
        <input type="url" id="cover_url" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–æ–∂–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
        <img id="coverPreview" 
             style="
               max-height: 140px;
               max-width: 100%;
               margin-top: 8px;
               display: none;
               object-fit: contain;
               border-radius: 8px;
               box-shadow: 0 2px 6px rgba(0,0,0,0.15);
             " />
      </div>

      <div class="form-block">
        <label>–°—Ç–∞—Ç—É—Å</label>
        <select id="status">
          <option value="want_to_read">–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</option>
          <option value="reading">–ß–∏—Ç–∞—é</option>
          <option value="read">–ü—Ä–æ—á–∏—Ç–∞–ª</option>
        </select>
      </div>

      <div class="form-block">
        <label>–û—Ü–µ–Ω–∫–∞</label>
        <select id="rating">
          <option value="">–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</option>
          ${[1, 2, 3, 4, 5].map(n => `<option value="${n}">‚≠ê ${n}</option>`).join("")}
        </select>
      </div>

      <div class="form-block date-group">
        <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
        <input type="date" id="started_at" />
        <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
        <input type="date" id="finished_at" />
      </div>

      <div class="form-buttons">
        <button type="submit" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button type="button" class="back-btn" onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
      </div>
    </form>
  `;

  // üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–Ω–∏–≥
  document.getElementById("title").addEventListener("input", handleBookSearch);

  // üì∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
  document.getElementById("cover_file").addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
      const preview = document.getElementById("coverPreview");
      preview.src = URL.createObjectURL(file);
      preview.style.display = "block";
    }
  });

  // üì∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ URL
  document.getElementById("cover_url").addEventListener("input", (e) => {
    const url = e.target.value.trim();
    const preview = document.getElementById("coverPreview");
    if (url) {
      preview.src = url;
      preview.style.display = "block";
    } else {
      preview.style.display = "none";
    }
  });

  // –î–∞—Ç–∞ –ü—Ä–æ—á—Ç–µ–Ω–∏—è
  document.getElementById("status").addEventListener("change", () => {
  const status = document.getElementById("status").value;
  const finishedInput = document.getElementById("finished_at");

  if (status === "read" && !finishedInput.value) {
    const today = new Date().toISOString().split("T")[0];
    finishedInput.value = today;
  }
});
};


// üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏ –≤ Supabase
export async function uploadCover(file) {
  if (!file) return "";

  const ext = file.name.includes('.') ? file.name.split('.').pop() : 'jpg';
  const fileName = `${crypto.randomUUID()}.${ext}`;

  const { error } = await supabase.storage
    .from("covers")
    .upload(fileName, file, {
      cacheControl: "3600",
      upsert: false,
      contentType: file.type // üîπ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    });

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:", error);
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏");
    return "";
  }

  const { data } = supabase.storage.from("covers").getPublicUrl(fileName);
  return data?.publicUrl || "";
}

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
window.submitAddForm = async function (e) {
  e.preventDefault();
  const tgUser = Telegram.WebApp.initDataUnsafe?.user || {};

  let coverUrl = document.getElementById("cover_url").value.trim();
  const file = document.getElementById("cover_file").files[0];
  if (file) {
    coverUrl = await uploadCover(file);
    if (!coverUrl) {
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
      return;
    }
  }

  const status = document.getElementById("status").value;
  const startedAt = document.getElementById("started_at").value || null;
  let finishedAt = document.getElementById("finished_at").value || null;

  if (status === "read" && !finishedAt) {
    finishedAt = new Date().toISOString().split("T")[0];
  }

  const ratingValue = document.getElementById("rating").value;

  // üîπ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  const normalize = (str) =>
    str.trim().replace(/\s+/g, " ").toLowerCase();

  const normalizeAuthor = (str) =>
    normalize(str).split(" ").sort().join(" ");

  const title = document.getElementById("title").value.trim();
  const author = document.getElementById("author").value.trim();

  const normTitle = normalize(title);
  const normAuthor = normalizeAuthor(author);

  const book = {
    id: crypto.randomUUID(),
    user_id: userId,
    username: tgUser?.username || "",
    user_first_name: tgUser?.first_name || "",
    title,
    author,
    cover_url: coverUrl || "",
    status,
    rating: ratingValue ? Number(ratingValue) : null,
    added_at: new Date().toISOString().split("T")[0],
    started_at: startedAt,
    finished_at: finishedAt
  };

  // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ books_library –±–µ–∑ –¥—É–±–ª–µ–π
  const { data: existing, error: searchError } = await supabase
    .from("books_library")
    .select("id, title, author")
    .limit(100); // –æ–≥—Ä–∞–Ω–∏—á–∏–º –∑–∞–ø—Ä–æ—Å

  if (searchError) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ books_library:", searchError);
  } else {
    const duplicate = existing.find(
      b => normalize(b.title) === normTitle && normalizeAuthor(b.author) === normAuthor
    );

    if (!duplicate) {
      const { error: insertError } = await supabase
        .from("books_library")
        .insert([{
          title,
          author,
          cover_url: coverUrl || null
        }]);
      if (insertError) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ books_library:", insertError);
      }
    }
  }

  // üìå –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ —Ç—Ä–µ–∫–µ—Ä
  await addBook(book);
  currentTab = book.status;
  renderMainScreen();
};

// ‚úèÔ∏è –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–Ω–∏–≥–∏
async function searchBooks(query) {
  const { data, error } = await supabase
    .from("books_library") // —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥
    .select("title, author, cover_url")
    .ilike("title", `%${query}%`)
    .limit(5);

  return error ? [] : data;
}

async function handleBookSearch(e) {
  const value = e.target.value.trim();
  const list = document.getElementById("suggestions");
  list.innerHTML = "";
  if (value.length < 4) return;

  const suggestions = await searchBooks(value);
  list.innerHTML = suggestions.map(
    book => `<div class="suggestion-item" onclick="selectBook('${book.title}', '${book.author}', '${book.cover_url || ""}')">${book.title} ‚Äî ${book.author}</div>`
  ).join("");
}

window.selectBook = function(title, author, coverUrl) {
  document.getElementById("title").value = title;
  document.getElementById("author").value = author;
  if (coverUrl) {
    document.getElementById("coverPreview").src = coverUrl;
    document.getElementById("coverPreview").style.display = "block";
    document.getElementById("cover_url").value = coverUrl;
  }
  document.getElementById("suggestions").innerHTML = "";
};

// ‚úèÔ∏è –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
window.editBook = function(id) {
  const book = books.find(b => b.id === id);
  const container = document.getElementById("app");

  container.innerHTML = `
    <h2>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</h2>
    <form id="editForm" class="add-book-form">

      <div class="form-block">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</label>
        <input type="text" id="title" value="${book.title}" required />
      </div>

      <div class="form-block">
        <label>–ê–≤—Ç–æ—Ä</label>
        <input type="text" id="author" value="${book.author}" required />
      </div>

      <div class="form-block">
        <label>–û–±–ª–æ–∂–∫–∞</label>
        <input type="file" id="cover_file" accept="image/*" />
        <input type="url" id="cover_url" value="${book.cover_url || ''}" />
        <img id="coverPreview" 
             src="${book.cover_url || ''}" 
             style="
               max-height: 140px;
               max-width: 100%;
               margin-top: 8px;
               ${book.cover_url ? '' : 'display:none;'}
               object-fit: contain;
               border-radius: 8px;
               box-shadow: 0 2px 6px rgba(0,0,0,0.15);
             " />
      </div>

      <div class="form-block">
        <label>–°—Ç–∞—Ç—É—Å</label>
        <select id="status">
          <option value="want_to_read" ${book.status === 'want_to_read' ? 'selected' : ''}>–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</option>
          <option value="reading" ${book.status === 'reading' ? 'selected' : ''}>–ß–∏—Ç–∞—é</option>
          <option value="read" ${book.status === 'read' ? 'selected' : ''}>–ü—Ä–æ—á–∏—Ç–∞–ª</option>
        </select>
      </div>

      <div class="form-block">
        <label>–û—Ü–µ–Ω–∫–∞</label>
        <select id="rating">
          <option value="">–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</option>
          ${[1,2,3,4,5].map(n => `<option value="${n}" ${book.rating === n ? 'selected' : ''}>‚≠ê ${n}</option>`).join("")}
        </select>
      </div>

      <div class="form-block date-group">
        <label>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</label>
        <input type="date" id="added_at" value="${book.added_at || ''}" />
        <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
        <input type="date" id="started_at" value="${book.started_at || ''}" />
        <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
        <input type="date" id="finished_at" value="${book.finished_at || ''}" />
      </div>

      <div class="form-buttons">
        <button type="submit" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button type="button" class="back-btn" id="backBtn">‚Üê –ù–∞–∑–∞–¥</button>
      </div>
    </form>
  `;

  // üì∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
  document.getElementById("cover_file").addEventListener("change", (e) => {
    const file = e.target.files[0];
    const preview = document.getElementById("coverPreview");
    if (file) {
      preview.src = URL.createObjectURL(file);
      preview.style.display = "block";
    }
  });

  // üì∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ URL
  document.getElementById("cover_url").addEventListener("input", (e) => {
    const url = e.target.value.trim();
    const preview = document.getElementById("coverPreview");
    if (url) {
      preview.src = url;
      preview.style.display = "block";
    } else {
      preview.style.display = "none";
    }
  });
  
  // –î–∞—Ç–∞ –ü—Ä–æ—á—Ç–µ–Ω–∏—è
  document.getElementById("status").addEventListener("change", () => {
  const status = document.getElementById("status").value;
  const finishedInput = document.getElementById("finished_at");

  if (status === "read" && !finishedInput.value) {
    const today = new Date().toISOString().split("T")[0];
    finishedInput.value = today;
  }
});


  // –ù–∞–∑–∞–¥
  document.getElementById("backBtn").addEventListener("click", renderMainScreen);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  document.getElementById("editForm").addEventListener("submit", async function(e) {
    e.preventDefault();

    let coverUrl = document.getElementById("cover_url").value.trim();
    const file = document.getElementById("cover_file").files[0];
    if (file) {
      coverUrl = await uploadCover(file);
    }

    const updated = {
      title: document.getElementById("title").value.trim(),
      author: document.getElementById("author").value.trim(),
      cover_url: coverUrl,
      status: document.getElementById("status").value,
      rating: document.getElementById("rating").value ? Number(document.getElementById("rating").value) : null,
      comment: book.comment,
      added_at: document.getElementById("added_at").value || null,
      started_at: document.getElementById("started_at").value || null,
      finished_at: document.getElementById("finished_at").value || null
    };

    await updateBook(id, updated);
renderMainScreen();
  });
};


// üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
window.deleteBook = async function(id) {
  const book = books.find(b => b.id === id);
  const confirmDelete = confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.");
  if (!confirmDelete) return;

  // —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  if (book?.comment) {
    const images = (book.comment.match(/https?:\/\/[^\s)]+/g) || []).filter(url => url.includes("/comments/"));
    for (const imgUrl of images) {
      await deleteImageFromSupabase(imgUrl);
    }
  }

  // —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
await deleteBook(id);
  
alert("üóë –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞");
  await renderMainScreen();
};

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV/JSON
function exportToCSV(data) {
  if (!data || !data.length) return;

  const header = Object.keys(data[0]);
  const rows = data.map(row =>
    header.map(field => `"${(row[field] || "").toString().replace(/"/g, '""')}"`)
  );
  
  // –î–æ–±–∞–≤–ª—è–µ–º BOM (Byte Order Mark) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel
  const bom = "\uFEFF";
  const csvContent = bom + [header.join(","), ...rows.map(r => r.join(","))].join("\n");

  uploadAndShare(csvContent, `books-${userId}.csv`, "text/csv");
}


function exportToJSON(data) {
  const jsonContent = JSON.stringify(data, null, 2);
  uploadAndShare(jsonContent, `books-${userId}.json`, "application/json");
}
// ‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
async function uploadAndShare(content, filename, type) {
  const blob = new Blob([content], { type });
  const url = await uploadExportFile(filename, blob, type);

  if (url) {
    alert("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é");
    window.open(url, "_blank");
  } else {
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞");
  }
}

renderMainScreen();

// üì∏ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Supabase Storage –ø–æ URL
async function deleteImageFromSupabase(imageUrl) {
  try {
    if (!imageUrl.includes("/comments/")) return; // —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ bucket comments
    const fileName = decodeURIComponent(imageUrl.split("/").pop());
    const { error } = await supabase.storage
      .from("comments")
      .remove([fileName]);
    if (error) console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è:", err);
  }
}

// üí¨ –û—Ç–∫—Ä—ã—Ç–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∫–Ω–∏–≥–µ —á–µ—Ä–µ–∑ Toast UI Editor
window.openComment = function(bookId, readonly = true) {
  const book = books.find(b => b.id === bookId);
  const container = document.getElementById("app");

  container.innerHTML = `
    <h2>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–Ω–∏–≥–µ</h2>
    <b>${book.title}</b> <i>(${book.author})</i><br/><br/>
    <div id="toastEditor"></div>

    <div class="comment-actions">
      ${readonly
        ? `<button onclick="openComment('${bookId}', false)">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>`
        : `<button onclick="saveComment('${book.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>`
      }
      <button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;

  if (readonly) {
    toastui.Editor.factory({
      el: document.querySelector('#toastEditor'),
      viewer: true,
      initialValue: book.comment || "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω."
    });
  } else {
window.toastEditor = new toastui.Editor({
  el: document.querySelector('#toastEditor'),
  height: '400px',
  language: 'ru',
  initialEditType: 'wysiwyg',
  previewStyle: 'vertical',
  initialValue: book.comment || "",
  toolbarItems: [
    ['heading', 'bold', 'italic', 'strike'],
    ['hr', 'quote'],
    ['ul', 'ol', 'task'],
    ['table', 'link', 'image'],
    // üëâ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ Undo/Redo
    [{
      name: 'undo',
      tooltip: '–û—Ç–º–µ–Ω–∏—Ç—å',
      className: 'toastui-editor-toolbar-icons undo',
      command: 'undo',
      text: '‚Ü©Ô∏è'
    },
    {
      name: 'redo',
      tooltip: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
      className: 'toastui-editor-toolbar-icons redo',
      command: 'redo',
      text: '‚Ü™Ô∏è'
    }]
  ],
  hooks: {
    addImageBlobHook: async (blob, callback) => {
      const url = await uploadImageToSupabase(blob);
      callback(url, '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  }
});


    // üí° –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
    const fixPopupPosition = () => {
      const popups = document.querySelectorAll('.toastui-editor-popup');
      popups.forEach(popup => {
        const rect = popup.getBoundingClientRect();
if (rect.left < 0 || rect.right > window.innerWidth) {
  const shift = Math.min(Math.abs(rect.left), rect.right - window.innerWidth);
  popup.style.transform = `translateX(${-shift - 12}px)`;
}

      });
    };

    const observer = new MutationObserver(() => fixPopupPosition());
    observer.observe(document.body, { childList: true, subtree: true });

    // —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ timeout (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞ –º—É—Ç–∞—Ü–∏–∏)
  setTimeout(fixPopupPosition, 300);
  setTimeout(fixPopupPosition, 800); // —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–∑–æ–≤
  }
};


// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
window.saveComment = async function(bookId) {
  const book = books.find(b => b.id === bookId);
  const oldComment = book?.comment || "";
  const newComment = toastEditor.getMarkdown();

  // –Ω–∞—Ö–æ–¥–∏–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  const oldImages = (oldComment.match(/https?:\/\/[^\s)]+/g) || []).filter(url => url.includes("/comments/"));
  const newImages = (newComment.match(/https?:\/\/[^\s)]+/g) || []).filter(url => url.includes("/comments/"));
  const removedImages = oldImages.filter(url => !newImages.includes(url));

  // —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ storage
  for (const imgUrl of removedImages) {
    await deleteImageFromSupabase(imgUrl);
  }

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
await saveComment(bookId, userId, newComment);

  renderMainScreen();
};

// üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Supabase Storage
async function uploadImageToSupabase(blob) {
  const fileName = `${crypto.randomUUID()}.${blob.type.split("/")[1]}`;
  const { error } = await supabase.storage
    .from("comments")
    .upload(fileName, blob, { upsert: false });

  if (error) {
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    return "";
  }

  const { data } = supabase.storage
    .from("comments")
    .getPublicUrl(fileName);

  return data.publicUrl;
}
