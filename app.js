// üìÅ app.js ‚Äî –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ WebApp
import { supabase, getBooks, addBook, uploadExportFile } from './api.js';

Telegram.WebApp.ready();
if (!Telegram.WebApp.initDataUnsafe?.user?.id) {
  alert("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram");
  throw new Error("WebApp –∑–∞–ø—É—â–µ–Ω –≤–Ω–µ Telegram");
}
const userId = Telegram.WebApp.initDataUnsafe.user.id.toString();

let books = [];
let currentTab = "read";

window.renderMainScreen = async function() {
  books = await getBooks(userId);
  const container = document.getElementById("app");
  const filtered = books.filter(b => b.status === currentTab);

  container.innerHTML = `
    <h2>üìò –ú–æ–π –∫–Ω–∏–∂–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä</h2>

    <div class="nav-tabs">
      <div class="nav-tab ${currentTab === 'reading' ? 'active' : ''}" onclick="switchTab('reading')">–ß–∏—Ç–∞—é</div>
      <div class="nav-tab ${currentTab === 'read' ? 'active' : ''}" onclick="switchTab('read')">–ü—Ä–æ—á–∏—Ç–∞–ª</div>
      <div class="nav-tab ${currentTab === 'want_to_read' ? 'active' : ''}" onclick="switchTab('want_to_read')">–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</div>
    </div>

    <button onclick="showAddForm()">+ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É</button>

    <div id="book-list">
      ${filtered.map(renderBookCard).join("")}
    </div>

    <div class="footer-buttons">
      <button id="exportBtn">üì§Export</button>
      <div id="formatMenu" class="hidden">
        <div class="format-option" data-format="csv">CSV</div>
        <div class="format-option" data-format="json">JSON</div>
      </div>
      <button>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
      <button>üîç –ü–æ–∏—Å–∫ / —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</button>
    </div>
  `;

  // –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  document.getElementById("exportBtn").addEventListener("click", () => {
    document.getElementById("formatMenu").classList.toggle("hidden");
  });

  document.querySelectorAll(".format-option").forEach(option => {
    option.addEventListener("click", async () => {
      const format = option.getAttribute("data-format");
      document.getElementById("formatMenu").classList.add("hidden");

      const { data, error } = await supabase
        .from("user_books")
        .select("*")
        .eq("user_id", userId);

      if (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        return;
      }

      if (format === "csv") exportToCSV(data);
      if (format === "json") exportToJSON(data);
    });
  });
}

window.switchTab = function(tab) {
  currentTab = tab;
  renderMainScreen();
};

function renderBookCard(book) {
   return `
    <div class="book-card">
      <img src="${book.cover_url}" alt="${book.title}" onclick="showZoom('${book.cover_url}')" />
      
      <div class="info">
        <div class="main-block">
          <b class="book-title">${book.title}</b>
          <i class="book-author">${book.author}</i>
          ${book.rating ? `<div class="stars">${renderStars(book.rating)}</div>` : ""}
          ${book.started_at ? `<div>üìñ ${book.started_at}</div>` : ""}
          ${book.finished_at ? `<div>üèÅ ${book.finished_at}</div>` : ""}
          ${book.comment ? `<div class="comment-preview"><button onclick="openComment('${book.id}')">üí¨ –ó–∞–º–µ—Ç–∫–∏/–í—ã–≤–æ–¥—ã</button></div>` : ""}

        </div>

        <div class="card-actions">
          <button class="icon-btn" onclick="editBook('${book.id}')">‚úèÔ∏è</button>
          <button class="icon-btn" onclick="deleteBook('${book.id}')">üóëÔ∏è</button>
        </div>

         </div>
    </div>
  `;
}

function renderStars(rating = 0) {
  const fullStar = '‚òÖ';
  const emptyStar = '‚òÜ';
  return [...Array(5)].map((_, i) => i < rating ? fullStar : emptyStar).join('');
}

window.showAddForm = function() {
  const container = document.getElementById("app");
  container.innerHTML = `
    <h2>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</h2>
    <form class="add-book-form" onsubmit="submitAddForm(event)">
      <input type="text" id="title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏" required />
      <input type="text" id="author" placeholder="–ê–≤—Ç–æ—Ä" required />
      <input type="url" id="cover_url" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–æ–∂–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />

      <select id="status">
        <option value="want_to_read">–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</option>
        <option value="reading">–ß–∏—Ç–∞—é</option>
        <option value="read">–ü—Ä–æ—á–∏—Ç–∞–ª</option>
      </select>

      <select id="rating">
        <option value="">–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</option>
        <option value="1">‚≠ê 1</option>
        <option value="2">‚≠ê 2</option>
        <option value="3">‚≠ê 3</option>
        <option value="4">‚≠ê 4</option>
        <option value="5">‚≠ê 5</option>
      </select>

      <input type="date" id="started_at" placeholder="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
      <input type="date" id="finished_at" placeholder="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />

      <button type="submit" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </form>

    <button class="back-btn" onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
  `;
};

window.submitAddForm = async function(e) {
  e.preventDefault();
  const ratingValue = document.getElementById("rating").value;
  const book = {
    id: crypto.randomUUID(),
    user_id: userId,
    title: document.getElementById("title").value,
    author: document.getElementById("author").value,
    cover_url: document.getElementById("cover_url").value,
    status: document.getElementById("status").value,
    rating: ratingValue ? Number(ratingValue) : null,
    comment: document.getElementById("comment").value.trim(),
    added_at: new Date().toISOString().split("T")[0],
    finished_at: document.getElementById("status").value === 'read' ? new Date().toISOString().split("T")[0] : null
  };
  await addBook(book);
  currentTab = book.status;
  renderMainScreen();
};

window.editBook = function(id) {
  const book = books.find(b => b.id === id);
  const container = document.getElementById("app");

  container.innerHTML = `
    <h2>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</h2>
    <form id="editForm">
      <input type="text" id="title" value="${book.title}" required />
      <input type="text" id="author" value="${book.author}" required />
      <input type="url" id="cover_url" value="${book.cover_url}" />
      <input type="date" id="added_at" value="${book.added_at || ""}" />
      <input type="date" id="started_at" value="${book.started_at || ""}" />
      <input type="date" id="finished_at" value="${book.finished_at || ""}" />
      <select id="status">
        <option value="want_to_read" ${book.status === 'want_to_read' ? 'selected' : ''}>–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å</option>
        <option value="reading" ${book.status === 'reading' ? 'selected' : ''}>–ß–∏—Ç–∞—é</option>
        <option value="read" ${book.status === 'read' ? 'selected' : ''}>–ü—Ä–æ—á–∏—Ç–∞–ª</option>
      </select>
      <select id="rating">
        <option value="">–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</option>
        ${[1,2,3,4,5].map(n => `<option value="${n}" ${book.rating === n ? 'selected' : ''}>‚≠ê ${n}</option>`).join("")}
      </select>
      <button type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </form>
    <button id="backBtn">‚Üê –ù–∞–∑–∞–¥</button>
  `;

  document.getElementById("backBtn").addEventListener("click", renderMainScreen);

  document.getElementById("editForm").addEventListener("submit", async function(e) {
    e.preventDefault();
    
    const updated = {
      title: document.getElementById("title").value.trim(),
      author: document.getElementById("author").value.trim(),
      cover_url: document.getElementById("cover_url").value.trim(),
      status: document.getElementById("status").value,
      rating: document.getElementById("rating").value ? Number(document.getElementById("rating").value) : null,
      comment: document.getElementById("comment").value.trim(),
      added_at: document.getElementById("added_at").value || null,
      started_at: document.getElementById("started_at").value || null,
      finished_at: document.getElementById("finished_at").value || null
    };

    const { error } = await supabase
      .from("user_books")
      .update(updated)
      .eq("id", id);

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
    } else {
      alert("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
      renderMainScreen();
    }
  });
};


window.submitEditForm = async function(e, id) {
  e.preventDefault();

  const ratingValue = document.getElementById("rating").value;
  const updated = {
    title: document.getElementById("title").value.trim(),
    author: document.getElementById("author").value.trim(),
    cover_url: document.getElementById("cover_url").value.trim(),
    status: document.getElementById("status").value,
    rating: ratingValue ? Number(ratingValue) : null,
    comment: document.getElementById("comment").value.trim(),
    added_at: document.getElementById("added_at").value || null,
    started_at: document.getElementById("started_at").value || null,
    finished_at: document.getElementById("finished_at").value || null
  };

  const { error } = await supabase
    .from('user_books')
    .update(updated)
    .eq("id", id);

  if (error) {
    console.error(error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏");
    return;
  }

  alert("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
  renderMainScreen(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
};
window.deleteBook = async function(id) {
  const confirmDelete = confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.");
  if (!confirmDelete) return;

  const { error } = await supabase.from("user_books").delete().eq("id", id);
  if (error) {
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    return;
  }

  alert("üóë –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞");
  await renderMainScreen();
};



function exportToCSV(data) {
  if (!data || !data.length) return;

  const header = Object.keys(data[0]);
  const rows = data.map(row =>
    header.map(field => `"${(row[field] || "").toString().replace(/"/g, '""')}"`)
  );
  
  // –î–æ–±–∞–≤–ª—è–µ–º BOM (Byte Order Mark) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel
  const bom = "\uFEFF";
  const csvContent = bom + [header.join(","), ...rows.map(r => r.join(","))].join("\n");

  uploadAndShare(csvContent, `books-${userId}.csv`, "text/csv");
}


function exportToJSON(data) {
  const jsonContent = JSON.stringify(data, null, 2);
  uploadAndShare(jsonContent, `books-${userId}.json`, "application/json");
}

async function uploadAndShare(content, filename, type) {
  const blob = new Blob([content], { type });
  const url = await uploadExportFile(filename, blob, type);

  if (url) {
    alert("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é");
    window.open(url, "_blank");
  } else {
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞");
  }
}

renderMainScreen();

window.zoomImage = function (url) {
  const overlay = document.getElementById("zoom-overlay");
  const img = document.getElementById("zoom-image");
  img.src = url;
  overlay.classList.remove("hidden");
};

window.closeZoom = function () {
  document.getElementById("zoom-overlay").classList.add("hidden");
};
window.showZoom = function (url) {
  const overlay = document.getElementById("zoom-overlay");
  const img = document.getElementById("zoom-image");
  img.src = url;
  overlay.classList.remove("hidden");
};

window.closeZoom = function () {
  document.getElementById("zoom-overlay").classList.add("hidden");
};

window.openComment = function(bookId, readonly = true) {
  const book = books.find(b => b.id === bookId);
  const container = document.getElementById("app");

  container.innerHTML = `
    <h2>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–Ω–∏–≥–µ</h2>
    <b>${book.title}</b> <i>(${book.author})</i><br/><br/>
    <div id="toastEditor"></div>

    <div class="comment-actions">
      ${readonly
        ? `<button onclick="openComment('${bookId}', false)">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>`
        : `<button onclick="saveComment('${book.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>`
      }
      <button onclick="renderMainScreen()">‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  `;

  if (readonly) {
    toastui.Editor.factory({
      el: document.querySelector('#toastEditor'),
      viewer: true,
      initialValue: book.comment || "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω."
    });
  } else {
window.toastEditor = new toastui.Editor({
  el: document.querySelector('#toastEditor'),
  height: '400px',
  language: 'ru',
  initialEditType: 'wysiwyg',
  previewStyle: 'vertical',
  initialValue: book.comment || "",
  toolbarItems: [
    ['heading', 'bold', 'italic', 'strike'],
    ['hr', 'quote'],
    ['ul', 'ol', 'task'],
    ['table', 'link', 'image'],
    // üëâ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ Undo/Redo
    [{
      name: 'undo',
      tooltip: '–û—Ç–º–µ–Ω–∏—Ç—å',
      className: 'toastui-editor-toolbar-icons undo',
      command: 'undo',
      text: '‚Ü©Ô∏è'
    },
    {
      name: 'redo',
      tooltip: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
      className: 'toastui-editor-toolbar-icons redo',
      command: 'redo',
      text: '‚Ü™Ô∏è'
    }]
  ],
  hooks: {
    addImageBlobHook: async (blob, callback) => {
      const url = await uploadImageToSupabase(blob);
      callback(url, '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  }
});


    // üí° –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
    const fixPopupPosition = () => {
      const popups = document.querySelectorAll('.toastui-editor-popup');
      popups.forEach(popup => {
        const rect = popup.getBoundingClientRect();
if (rect.left < 0 || rect.right > window.innerWidth) {
  const shift = Math.min(Math.abs(rect.left), rect.right - window.innerWidth);
  popup.style.transform = `translateX(${-shift - 12}px)`;
}

      });
    };

    const observer = new MutationObserver(() => fixPopupPosition());
    observer.observe(document.body, { childList: true, subtree: true });

    // —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ timeout (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞ –º—É—Ç–∞—Ü–∏–∏)
  setTimeout(fixPopupPosition, 300);
  setTimeout(fixPopupPosition, 800); // —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–∑–æ–≤
  }
};



window.saveComment = async function(bookId) {
  const newComment = toastEditor.getMarkdown(); // –ò–ª–∏ .getHTML() ‚Äî –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ

  const { error } = await supabase
    .from("user_books")
    .update({ comment: newComment })
    .eq("id", bookId)
    .eq("user_id", userId);

  if (error) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
    return;
  }

  renderMainScreen();
};

async function uploadImageToSupabase(blob) {
  const fileName = `${crypto.randomUUID()}.${blob.type.split("/")[1]}`;
  const { error } = await supabase.storage
    .from("comments")
    .upload(fileName, blob, { upsert: false });

  if (error) {
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    return "";
  }

  const { data } = supabase.storage
    .from("comments")
    .getPublicUrl(fileName);

  return data.publicUrl;
}
