// üìÅ handler.js ‚Äî –µ–¥–∏–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è)
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// üîß –ß—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
async function getBody(req) {
  const chunks = [];
  for await (const chunk of req) chunks.push(chunk);
  const raw = Buffer.concat(chunks).toString("utf8");
  return JSON.parse(raw);
}

// üìå –ú–∞—Ä—à—Ä—É—Ç—ã API
const routes = {
  async getBooks(req, res, params) {
    const userId = params.get("user_id");
    if (!userId) return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω user_id" });

    const { data, error } = await supabase
      .from('user_books')
      .select('*')
      .eq('user_id', userId)
      .order('added_at', { ascending: false });

    if (error) return res.status(500).json({ error: error.message });
    res.status(200).json(data);
  },

  async addBook(req, res) {
    try {
      const book = await getBody(req);
      if (!book?.title || !book?.author) {
        return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title –∏–ª–∏ author" });
      }

      const { error } = await supabase.from('user_books').insert([book]);
      if (error) return res.status(500).json({ error: error.message });

      res.status(200).json({ success: true });
    } catch {
      res.status(400).json({ error: "Invalid JSON" });
    }
  },

  async searchBooks(req, res, params) {
    const query = params.get("query") || "";
    if (!query) return res.status(400).json({ error: "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞" });

    const { data, error } = await supabase
      .from("books_library")
      .select("title, author, cover_url")
      .ilike("title", `%${query}%`)
      .limit(5);

    if (error) return res.status(500).json({ error: error.message });
    res.status(200).json(data);
  }
};


// GET /api/handler?route=listCollections&user_id=...
routes.listCollections = async (req, res, params) => {
  const userId = params.get('user_id');
  if (!userId) return res.status(400).json({ error: 'user_id required' });

  const { data, error } = await supabase
    .from('collections')
    .select('*')
    .eq('user_id', userId)
    .order('sort_order', { ascending: true })
    .order('created_at', { ascending: true });

  if (error) return res.status(500).json({ error: error.message });
  res.json(data);
};

// POST JSON { user_id, name, icon?, color? }
routes.createCollection = async (req, res) => {
  const { user_id, name, icon, color } = await readJsonBody(req);
  if (!user_id || !name) return res.status(400).json({ error: 'user_id & name required' });

  const { data, error } = await supabase
    .from('collections')
    .insert([{ user_id, name, icon: icon || null, color: color || null }])
    .select('id').single();

  if (error) return res.status(500).json({ error: error.message });
  res.json({ id: data.id });
};

// POST JSON { id, name?, icon?, color?, sort_order? }
routes.renameCollection = async (req, res) => {
  const { id, ...fields } = await readJsonBody(req);
  if (!id) return res.status(400).json({ error: 'id required' });

  const { error } = await supabase.from('collections').update(fields).eq('id', id);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ success: true });
};

// POST JSON { id }  (—É–¥–∞–ª–∏—Ç –∏ —Å–≤—è–∑–∏ –∏–∑-–∑–∞ ON DELETE CASCADE)
routes.deleteCollection = async (req, res) => {
  const { id } = await readJsonBody(req);
  if (!id) return res.status(400).json({ error: 'id required' });

  const { error } = await supabase.from('collections').delete().eq('id', id);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ success: true });
};

// === Items (—Å–≤—è–∑–∏ –∫–Ω–∏–≥–∞ ‚Üî –∫–æ–ª–ª–µ–∫—Ü–∏—è) ===

// POST JSON { user_id, book_id, collection_ids: [] }
// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–∫ –¥–ª—è –∫–Ω–∏–≥–∏ (atomic –Ω–∞ —É—Ä–æ–≤–Ω–µ API)
routes.setBookCollections = async (req, res) => {
  const { user_id, book_id, collection_ids } = await readJsonBody(req);
  if (!user_id || !book_id || !Array.isArray(collection_ids))
    return res.status(400).json({ error: 'user_id, book_id, collection_ids required' });

  // –¢–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏
  const { data: cur, error: e1 } = await supabase
    .from('collection_items')
    .select('collection_id')
    .eq('user_id', user_id)
    .eq('book_id', book_id);
  if (e1) return res.status(500).json({ error: e1.message });

  const current = new Set((cur || []).map(r => r.collection_id));
  const wanted  = new Set(collection_ids);

  const toAdd = [...wanted].filter(id => !current.has(id));
  const toDel = [...current].filter(id => !wanted.has(id));

  if (toAdd.length) {
    const rows = toAdd.map(cid => ({ user_id, book_id, collection_id: cid }));
    const { error: e2 } = await supabase.from('collection_items').insert(rows);
    if (e2) return res.status(500).json({ error: e2.message });
  }
  if (toDel.length) {
    const { error: e3 } = await supabase
      .from('collection_items')
      .delete()
      .eq('user_id', user_id)
      .eq('book_id', book_id)
      .in('collection_id', toDel);
    if (e3) return res.status(500).json({ error: e3.message });
  }

  res.json({ success: true, added: toAdd.length, removed: toDel.length });
};

// GET /api/handler?route=listBookCollections&book_id=...
routes.listBookCollections = async (req, res, params) => {
  const bookId = params.get('book_id');
  if (!bookId) return res.status(400).json({ error: 'book_id required' });

  const { data, error } = await supabase
    .from('collection_items')
    .select('collection_id')
    .eq('book_id', bookId);

  if (error) return res.status(500).json({ error: error.message });
  res.json((data || []).map(r => r.collection_id));
};

// GET /api/handler?route=listAllBookCollections&user_id=...
// –í–µ—Ä–Ω—ë—Ç –ø–∞—Ä—ã {book_id, collection_id} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
routes.listAllBookCollections = async (req, res, params) => {
  const userId = params.get('user_id');
  if (!userId) return res.status(400).json({ error: 'user_id required' });

  const { data, error } = await supabase
    .from('collection_items')
    .select('book_id, collection_id')
    .eq('user_id', userId);

  if (error) return res.status(500).json({ error: error.message });
  res.json(data || []);
};

// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) GET /api/handler?route=getBooksByCollection&user_id=...&collection_id=...&status=read|reading|want
routes.getBooksByCollection = async (req, res, params) => {
  const userId = params.get('user_id');
  const collectionId = params.get('collection_id');
  const status = params.get('status');
  if (!userId || !collectionId) return res.status(400).json({ error: 'user_id & collection_id required' });

  // —Å–Ω–∞—á–∞–ª–∞ id –∫–Ω–∏–≥
  const { data: ids, error: e1 } = await supabase
    .from('collection_items')
    .select('book_id')
    .eq('user_id', userId)
    .eq('collection_id', collectionId);
  if (e1) return res.status(500).json({ error: e1.message });

  const bookIds = (ids || []).map(r => r.book_id);
  if (!bookIds.length) return res.json([]);

  let q = supabase.from('user_books').select('*').in('id', bookIds);
  if (status) q = q.eq('status', status);
  const { data, error } = await q;
  if (error) return res.status(500).json({ error: error.message });
  res.json(data);
};


// üìå –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export default async function handler(req, res) {
  // CORS (–µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å —Å —Ñ—Ä–æ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ)
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") return res.status(200).end();

  const fullUrl = new URL(req.url, `http://${req.headers.host}`);
  const route = fullUrl.searchParams.get("route");
  const params = fullUrl.searchParams;

  console.log(`üì• ${req.method} /api/handler?route=${route}`);

  if (!route || !routes[route]) {
    return res.status(404).json({ error: "Route not found" });
  }

  // –í—ã–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
  try {
    await routes[route](req, res, params);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ "${route}":`, err);
    res.status(500).json({ error: "Internal server error" });
  }
}
