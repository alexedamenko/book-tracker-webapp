import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/** ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—è (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫) */
const WHITELIST = [
  'title', 'author', 'status', 'rating',
  'started_at', 'finished_at', 'added_at',
  'comment', 'category', 'tags', 'id', 'cover_url'
];

/** ‚úÖ –ù–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∂—ë—Å—Ç–∫–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π —Ç—É—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ */
const DEFAULT_FIELDS = [
  'title', 'author', 'status', 'rating',
  'started_at', 'finished_at', 'comment'
];

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' });
  }

  const userId = req.query.user_id?.toString();
  const format = (req.query.format || 'csv').toString().toLowerCase(); // csv | json

  if (!userId) return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω user_id' });

  // üß∞ –ø–æ–ª—è –∏–∑ query (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Üí —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ whitelist; –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç
  const fieldsParam = (req.query.fields || '').toString();
  const requested = fieldsParam
    .split(',')
    .map(s => s.trim())
    .filter(Boolean);

  const fields = (requested.length
      ? requested.filter(f => WHITELIST.includes(f))
      : DEFAULT_FIELDS
    );

  if (!fields.length) {
    return res.status(400).json({ error: '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
  }

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const selectClause = fields.join(', ');
    const { data, error } = await supabase
      .from('user_books')
      .select(selectClause)
      .eq('user_id', userId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ Supabase' });
    }

    // ---------- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ ----------
    const ts = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `books-${userId}-${ts}.${format}`;

    let content;
    let contentType;

    if (format === 'json') {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const slim = (data ?? []).map(row => {
        const out = {};
        for (const f of fields) out[f] = row?.[f] ?? '';
        return out;
      });
      content = Buffer.from(JSON.stringify(slim, null, 2), 'utf8');
      contentType = 'application/json; charset=utf-8';
    } else {
      // CSV + BOM –¥–ª—è Excel; —Ö–µ–¥–µ—Ä = –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏)
      const header = fields;
      const rows = (data ?? []).map(row =>
        header.map(f => `"${String(row?.[f] ?? '').replace(/"/g, '""')}"`).join(',')
      );
      const bom = '\uFEFF';
      const csv = bom + [header.join(','), ...rows].join('\n');
      content = Buffer.from(csv, 'utf8');
      contentType = 'text/csv; charset=utf-8';
    }

    // ---------- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –≤ Supabase Storage ----------
    const bucket = 'exports'; // –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π ‚Äî –∫–∞–∫ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    const path = `${userId}/${filename}`;
    const { error: upErr } = await supabase.storage
      .from(bucket)
      .upload(path, content, { contentType, upsert: true });
    if (upErr) console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é –≤ Storage:', upErr);

    // ---------- —Ñ–æ—Ä—Å-—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ----------
    res.setHeader('Content-Type', contentType);
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Cache-Control', 'no-store');
    res.status(200).send(content);
  } catch (e) {
    console.error('–°–±–æ–π —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', e);
    return res.status(500).json({ error: '–°–±–æ–π —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

